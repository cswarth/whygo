// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v4.25.3
// source: v0_constraints.proto

package whylogs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// constraints specify one of the following binary boolean relationships.
type Op int32

const (
	Op_unused      Op = 0
	Op_LT          Op = 1
	Op_LE          Op = 2
	Op_EQ          Op = 3
	Op_NE          Op = 4
	Op_GE          Op = 5
	Op_GT          Op = 6
	Op_MATCH       Op = 7
	Op_NOMATCH     Op = 8
	Op_BTWN        Op = 9
	Op_IN_SET      Op = 10
	Op_CONTAIN_SET Op = 11
	Op_EQ_SET      Op = 12
	Op_APPLY_FUNC  Op = 13
	Op_IN          Op = 14
	Op_CONTAIN     Op = 15
	Op_NOT_IN      Op = 16
	Op_SUM         Op = 17
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0:  "unused",
		1:  "LT",
		2:  "LE",
		3:  "EQ",
		4:  "NE",
		5:  "GE",
		6:  "GT",
		7:  "MATCH",
		8:  "NOMATCH",
		9:  "BTWN",
		10: "IN_SET",
		11: "CONTAIN_SET",
		12: "EQ_SET",
		13: "APPLY_FUNC",
		14: "IN",
		15: "CONTAIN",
		16: "NOT_IN",
		17: "SUM",
	}
	Op_value = map[string]int32{
		"unused":      0,
		"LT":          1,
		"LE":          2,
		"EQ":          3,
		"NE":          4,
		"GE":          5,
		"GT":          6,
		"MATCH":       7,
		"NOMATCH":     8,
		"BTWN":        9,
		"IN_SET":      10,
		"CONTAIN_SET": 11,
		"EQ_SET":      12,
		"APPLY_FUNC":  13,
		"IN":          14,
		"CONTAIN":     15,
		"NOT_IN":      16,
		"SUM":         17,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_v0_constraints_proto_enumTypes[0].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_v0_constraints_proto_enumTypes[0]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{0}
}

// Summary constraints specify a relationship between a summary field and a literal value,
// or between two summary fields.
// e.g.     'min' < 6
// 'std_dev' < 2.17
// 'min' > 'avg'
type SummaryConstraintMsg struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FirstField string                 `protobuf:"bytes,2,opt,name=first_field,json=firstField,proto3" json:"first_field,omitempty"`
	// Types that are valid to be assigned to Second:
	//
	//	*SummaryConstraintMsg_SecondField
	//	*SummaryConstraintMsg_Value
	//	*SummaryConstraintMsg_Between
	//	*SummaryConstraintMsg_ReferenceSet
	//	*SummaryConstraintMsg_ValueStr
	Second        isSummaryConstraintMsg_Second `protobuf_oneof:"second"`
	Op            Op                            `protobuf:"varint,5,opt,name=op,proto3,enum=Op" json:"op,omitempty"`
	Verbose       bool                          `protobuf:"varint,6,opt,name=verbose,proto3" json:"verbose,omitempty"`
	QuantileValue float64                       `protobuf:"fixed64,9,opt,name=quantile_value,json=quantileValue,proto3" json:"quantile_value,omitempty"`
	// Types that are valid to be assigned to ReferenceDistribution:
	//
	//	*SummaryConstraintMsg_ContinuousDistribution
	//	*SummaryConstraintMsg_DiscreteDistribution
	ReferenceDistribution isSummaryConstraintMsg_ReferenceDistribution `protobuf_oneof:"reference_distribution"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SummaryConstraintMsg) Reset() {
	*x = SummaryConstraintMsg{}
	mi := &file_v0_constraints_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryConstraintMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryConstraintMsg) ProtoMessage() {}

func (x *SummaryConstraintMsg) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryConstraintMsg.ProtoReflect.Descriptor instead.
func (*SummaryConstraintMsg) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{0}
}

func (x *SummaryConstraintMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SummaryConstraintMsg) GetFirstField() string {
	if x != nil {
		return x.FirstField
	}
	return ""
}

func (x *SummaryConstraintMsg) GetSecond() isSummaryConstraintMsg_Second {
	if x != nil {
		return x.Second
	}
	return nil
}

func (x *SummaryConstraintMsg) GetSecondField() string {
	if x != nil {
		if x, ok := x.Second.(*SummaryConstraintMsg_SecondField); ok {
			return x.SecondField
		}
	}
	return ""
}

func (x *SummaryConstraintMsg) GetValue() float64 {
	if x != nil {
		if x, ok := x.Second.(*SummaryConstraintMsg_Value); ok {
			return x.Value
		}
	}
	return 0
}

func (x *SummaryConstraintMsg) GetBetween() *SummaryBetweenConstraintMsg {
	if x != nil {
		if x, ok := x.Second.(*SummaryConstraintMsg_Between); ok {
			return x.Between
		}
	}
	return nil
}

func (x *SummaryConstraintMsg) GetReferenceSet() *structpb.ListValue {
	if x != nil {
		if x, ok := x.Second.(*SummaryConstraintMsg_ReferenceSet); ok {
			return x.ReferenceSet
		}
	}
	return nil
}

func (x *SummaryConstraintMsg) GetValueStr() string {
	if x != nil {
		if x, ok := x.Second.(*SummaryConstraintMsg_ValueStr); ok {
			return x.ValueStr
		}
	}
	return ""
}

func (x *SummaryConstraintMsg) GetOp() Op {
	if x != nil {
		return x.Op
	}
	return Op_unused
}

func (x *SummaryConstraintMsg) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *SummaryConstraintMsg) GetQuantileValue() float64 {
	if x != nil {
		return x.QuantileValue
	}
	return 0
}

func (x *SummaryConstraintMsg) GetReferenceDistribution() isSummaryConstraintMsg_ReferenceDistribution {
	if x != nil {
		return x.ReferenceDistribution
	}
	return nil
}

func (x *SummaryConstraintMsg) GetContinuousDistribution() *ReferenceDistributionContinuousMessage {
	if x != nil {
		if x, ok := x.ReferenceDistribution.(*SummaryConstraintMsg_ContinuousDistribution); ok {
			return x.ContinuousDistribution
		}
	}
	return nil
}

func (x *SummaryConstraintMsg) GetDiscreteDistribution() *ReferenceDistributionDiscreteMessage {
	if x != nil {
		if x, ok := x.ReferenceDistribution.(*SummaryConstraintMsg_DiscreteDistribution); ok {
			return x.DiscreteDistribution
		}
	}
	return nil
}

type isSummaryConstraintMsg_Second interface {
	isSummaryConstraintMsg_Second()
}

type SummaryConstraintMsg_SecondField struct {
	SecondField string `protobuf:"bytes,3,opt,name=second_field,json=secondField,proto3,oneof"`
}

type SummaryConstraintMsg_Value struct {
	Value float64 `protobuf:"fixed64,4,opt,name=value,proto3,oneof"`
}

type SummaryConstraintMsg_Between struct {
	Between *SummaryBetweenConstraintMsg `protobuf:"bytes,7,opt,name=between,proto3,oneof"`
}

type SummaryConstraintMsg_ReferenceSet struct {
	ReferenceSet *structpb.ListValue `protobuf:"bytes,8,opt,name=reference_set,json=referenceSet,proto3,oneof"`
}

type SummaryConstraintMsg_ValueStr struct {
	ValueStr string `protobuf:"bytes,12,opt,name=value_str,json=valueStr,proto3,oneof"`
}

func (*SummaryConstraintMsg_SecondField) isSummaryConstraintMsg_Second() {}

func (*SummaryConstraintMsg_Value) isSummaryConstraintMsg_Second() {}

func (*SummaryConstraintMsg_Between) isSummaryConstraintMsg_Second() {}

func (*SummaryConstraintMsg_ReferenceSet) isSummaryConstraintMsg_Second() {}

func (*SummaryConstraintMsg_ValueStr) isSummaryConstraintMsg_Second() {}

type isSummaryConstraintMsg_ReferenceDistribution interface {
	isSummaryConstraintMsg_ReferenceDistribution()
}

type SummaryConstraintMsg_ContinuousDistribution struct {
	ContinuousDistribution *ReferenceDistributionContinuousMessage `protobuf:"bytes,10,opt,name=continuous_distribution,json=continuousDistribution,proto3,oneof"`
}

type SummaryConstraintMsg_DiscreteDistribution struct {
	DiscreteDistribution *ReferenceDistributionDiscreteMessage `protobuf:"bytes,11,opt,name=discrete_distribution,json=discreteDistribution,proto3,oneof"`
}

func (*SummaryConstraintMsg_ContinuousDistribution) isSummaryConstraintMsg_ReferenceDistribution() {}

func (*SummaryConstraintMsg_DiscreteDistribution) isSummaryConstraintMsg_ReferenceDistribution() {}

type ReferenceDistributionContinuousMessage struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Sketch        *KllFloatsSketchMessage `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReferenceDistributionContinuousMessage) Reset() {
	*x = ReferenceDistributionContinuousMessage{}
	mi := &file_v0_constraints_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceDistributionContinuousMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDistributionContinuousMessage) ProtoMessage() {}

func (x *ReferenceDistributionContinuousMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDistributionContinuousMessage.ProtoReflect.Descriptor instead.
func (*ReferenceDistributionContinuousMessage) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{1}
}

func (x *ReferenceDistributionContinuousMessage) GetSketch() *KllFloatsSketchMessage {
	if x != nil {
		return x.Sketch
	}
	return nil
}

type ReferenceDistributionDiscreteMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FrequentItems *FrequentItemsSummary  `protobuf:"bytes,1,opt,name=frequent_items,json=frequentItems,proto3" json:"frequent_items,omitempty"`
	UniqueCount   *UniqueCountSummary    `protobuf:"bytes,2,opt,name=unique_count,json=uniqueCount,proto3" json:"unique_count,omitempty"`
	TotalCount    float32                `protobuf:"fixed32,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReferenceDistributionDiscreteMessage) Reset() {
	*x = ReferenceDistributionDiscreteMessage{}
	mi := &file_v0_constraints_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceDistributionDiscreteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDistributionDiscreteMessage) ProtoMessage() {}

func (x *ReferenceDistributionDiscreteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDistributionDiscreteMessage.ProtoReflect.Descriptor instead.
func (*ReferenceDistributionDiscreteMessage) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{2}
}

func (x *ReferenceDistributionDiscreteMessage) GetFrequentItems() *FrequentItemsSummary {
	if x != nil {
		return x.FrequentItems
	}
	return nil
}

func (x *ReferenceDistributionDiscreteMessage) GetUniqueCount() *UniqueCountSummary {
	if x != nil {
		return x.UniqueCount
	}
	return nil
}

func (x *ReferenceDistributionDiscreteMessage) GetTotalCount() float32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type SummaryBetweenConstraintMsg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Lower:
	//
	//	*SummaryBetweenConstraintMsg_SecondField
	//	*SummaryBetweenConstraintMsg_LowerValue
	Lower isSummaryBetweenConstraintMsg_Lower `protobuf_oneof:"lower"`
	// Types that are valid to be assigned to Upper:
	//
	//	*SummaryBetweenConstraintMsg_ThirdField
	//	*SummaryBetweenConstraintMsg_UpperValue
	Upper         isSummaryBetweenConstraintMsg_Upper `protobuf_oneof:"upper"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryBetweenConstraintMsg) Reset() {
	*x = SummaryBetweenConstraintMsg{}
	mi := &file_v0_constraints_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryBetweenConstraintMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryBetweenConstraintMsg) ProtoMessage() {}

func (x *SummaryBetweenConstraintMsg) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryBetweenConstraintMsg.ProtoReflect.Descriptor instead.
func (*SummaryBetweenConstraintMsg) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{3}
}

func (x *SummaryBetweenConstraintMsg) GetLower() isSummaryBetweenConstraintMsg_Lower {
	if x != nil {
		return x.Lower
	}
	return nil
}

func (x *SummaryBetweenConstraintMsg) GetSecondField() string {
	if x != nil {
		if x, ok := x.Lower.(*SummaryBetweenConstraintMsg_SecondField); ok {
			return x.SecondField
		}
	}
	return ""
}

func (x *SummaryBetweenConstraintMsg) GetLowerValue() float64 {
	if x != nil {
		if x, ok := x.Lower.(*SummaryBetweenConstraintMsg_LowerValue); ok {
			return x.LowerValue
		}
	}
	return 0
}

func (x *SummaryBetweenConstraintMsg) GetUpper() isSummaryBetweenConstraintMsg_Upper {
	if x != nil {
		return x.Upper
	}
	return nil
}

func (x *SummaryBetweenConstraintMsg) GetThirdField() string {
	if x != nil {
		if x, ok := x.Upper.(*SummaryBetweenConstraintMsg_ThirdField); ok {
			return x.ThirdField
		}
	}
	return ""
}

func (x *SummaryBetweenConstraintMsg) GetUpperValue() float64 {
	if x != nil {
		if x, ok := x.Upper.(*SummaryBetweenConstraintMsg_UpperValue); ok {
			return x.UpperValue
		}
	}
	return 0
}

type isSummaryBetweenConstraintMsg_Lower interface {
	isSummaryBetweenConstraintMsg_Lower()
}

type SummaryBetweenConstraintMsg_SecondField struct {
	SecondField string `protobuf:"bytes,1,opt,name=second_field,json=secondField,proto3,oneof"`
}

type SummaryBetweenConstraintMsg_LowerValue struct {
	LowerValue float64 `protobuf:"fixed64,2,opt,name=lower_value,json=lowerValue,proto3,oneof"`
}

func (*SummaryBetweenConstraintMsg_SecondField) isSummaryBetweenConstraintMsg_Lower() {}

func (*SummaryBetweenConstraintMsg_LowerValue) isSummaryBetweenConstraintMsg_Lower() {}

type isSummaryBetweenConstraintMsg_Upper interface {
	isSummaryBetweenConstraintMsg_Upper()
}

type SummaryBetweenConstraintMsg_ThirdField struct {
	ThirdField string `protobuf:"bytes,3,opt,name=third_field,json=thirdField,proto3,oneof"`
}

type SummaryBetweenConstraintMsg_UpperValue struct {
	UpperValue float64 `protobuf:"fixed64,4,opt,name=upper_value,json=upperValue,proto3,oneof"`
}

func (*SummaryBetweenConstraintMsg_ThirdField) isSummaryBetweenConstraintMsg_Upper() {}

func (*SummaryBetweenConstraintMsg_UpperValue) isSummaryBetweenConstraintMsg_Upper() {}

// ValueConstraints express a binary boolean relationship between an implied numeric value and a literal, or between a string value and a regex pattern.
// These are applied to every incoming value that is processed by whylogs.
type ApplyFunctionMsg struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Function       string                 `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	ReferenceValue string                 `protobuf:"bytes,2,opt,name=reference_value,json=referenceValue,proto3" json:"reference_value,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ApplyFunctionMsg) Reset() {
	*x = ApplyFunctionMsg{}
	mi := &file_v0_constraints_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyFunctionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFunctionMsg) ProtoMessage() {}

func (x *ApplyFunctionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFunctionMsg.ProtoReflect.Descriptor instead.
func (*ApplyFunctionMsg) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyFunctionMsg) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *ApplyFunctionMsg) GetReferenceValue() string {
	if x != nil {
		return x.ReferenceValue
	}
	return ""
}

type ValueConstraintMsg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to SecondField:
	//
	//	*ValueConstraintMsg_Value
	//	*ValueConstraintMsg_RegexPattern
	//	*ValueConstraintMsg_ValueSet
	//	*ValueConstraintMsg_Function
	SecondField   isValueConstraintMsg_SecondField `protobuf_oneof:"second_field"`
	Op            Op                               `protobuf:"varint,3,opt,name=op,proto3,enum=Op" json:"op,omitempty"`
	Verbose       bool                             `protobuf:"varint,4,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Total         uint32                           `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	Failures      uint32                           `protobuf:"varint,9,opt,name=failures,proto3" json:"failures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueConstraintMsg) Reset() {
	*x = ValueConstraintMsg{}
	mi := &file_v0_constraints_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueConstraintMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueConstraintMsg) ProtoMessage() {}

func (x *ValueConstraintMsg) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueConstraintMsg.ProtoReflect.Descriptor instead.
func (*ValueConstraintMsg) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{5}
}

func (x *ValueConstraintMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValueConstraintMsg) GetSecondField() isValueConstraintMsg_SecondField {
	if x != nil {
		return x.SecondField
	}
	return nil
}

func (x *ValueConstraintMsg) GetValue() float64 {
	if x != nil {
		if x, ok := x.SecondField.(*ValueConstraintMsg_Value); ok {
			return x.Value
		}
	}
	return 0
}

func (x *ValueConstraintMsg) GetRegexPattern() string {
	if x != nil {
		if x, ok := x.SecondField.(*ValueConstraintMsg_RegexPattern); ok {
			return x.RegexPattern
		}
	}
	return ""
}

func (x *ValueConstraintMsg) GetValueSet() *structpb.ListValue {
	if x != nil {
		if x, ok := x.SecondField.(*ValueConstraintMsg_ValueSet); ok {
			return x.ValueSet
		}
	}
	return nil
}

func (x *ValueConstraintMsg) GetFunction() *ApplyFunctionMsg {
	if x != nil {
		if x, ok := x.SecondField.(*ValueConstraintMsg_Function); ok {
			return x.Function
		}
	}
	return nil
}

func (x *ValueConstraintMsg) GetOp() Op {
	if x != nil {
		return x.Op
	}
	return Op_unused
}

func (x *ValueConstraintMsg) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *ValueConstraintMsg) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ValueConstraintMsg) GetFailures() uint32 {
	if x != nil {
		return x.Failures
	}
	return 0
}

type isValueConstraintMsg_SecondField interface {
	isValueConstraintMsg_SecondField()
}

type ValueConstraintMsg_Value struct {
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof"`
}

type ValueConstraintMsg_RegexPattern struct {
	RegexPattern string `protobuf:"bytes,5,opt,name=regex_pattern,json=regexPattern,proto3,oneof"`
}

type ValueConstraintMsg_ValueSet struct {
	ValueSet *structpb.ListValue `protobuf:"bytes,6,opt,name=value_set,json=valueSet,proto3,oneof"`
}

type ValueConstraintMsg_Function struct {
	Function *ApplyFunctionMsg `protobuf:"bytes,7,opt,name=function,proto3,oneof"`
}

func (*ValueConstraintMsg_Value) isValueConstraintMsg_SecondField() {}

func (*ValueConstraintMsg_RegexPattern) isValueConstraintMsg_SecondField() {}

func (*ValueConstraintMsg_ValueSet) isValueConstraintMsg_SecondField() {}

func (*ValueConstraintMsg_Function) isValueConstraintMsg_SecondField() {}

type MultiColumnValueConstraintMsg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Dependent:
	//
	//	*MultiColumnValueConstraintMsg_DependentColumns
	//	*MultiColumnValueConstraintMsg_DependentColumn
	Dependent isMultiColumnValueConstraintMsg_Dependent `protobuf_oneof:"dependent"`
	// Types that are valid to be assigned to Reference:
	//
	//	*MultiColumnValueConstraintMsg_Value
	//	*MultiColumnValueConstraintMsg_ValueSet
	//	*MultiColumnValueConstraintMsg_ReferenceColumns
	Reference                  isMultiColumnValueConstraintMsg_Reference `protobuf_oneof:"reference"`
	Op                         Op                                        `protobuf:"varint,4,opt,name=op,proto3,enum=Op" json:"op,omitempty"`
	Verbose                    bool                                      `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	InternalDependentColumnsOp Op                                        `protobuf:"varint,9,opt,name=internal_dependent_columns_op,json=internalDependentColumnsOp,proto3,enum=Op" json:"internal_dependent_columns_op,omitempty"`
	Total                      uint32                                    `protobuf:"varint,10,opt,name=total,proto3" json:"total,omitempty"`
	Failures                   uint32                                    `protobuf:"varint,11,opt,name=failures,proto3" json:"failures,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *MultiColumnValueConstraintMsg) Reset() {
	*x = MultiColumnValueConstraintMsg{}
	mi := &file_v0_constraints_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiColumnValueConstraintMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiColumnValueConstraintMsg) ProtoMessage() {}

func (x *MultiColumnValueConstraintMsg) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiColumnValueConstraintMsg.ProtoReflect.Descriptor instead.
func (*MultiColumnValueConstraintMsg) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{6}
}

func (x *MultiColumnValueConstraintMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultiColumnValueConstraintMsg) GetDependent() isMultiColumnValueConstraintMsg_Dependent {
	if x != nil {
		return x.Dependent
	}
	return nil
}

func (x *MultiColumnValueConstraintMsg) GetDependentColumns() *structpb.ListValue {
	if x != nil {
		if x, ok := x.Dependent.(*MultiColumnValueConstraintMsg_DependentColumns); ok {
			return x.DependentColumns
		}
	}
	return nil
}

func (x *MultiColumnValueConstraintMsg) GetDependentColumn() string {
	if x != nil {
		if x, ok := x.Dependent.(*MultiColumnValueConstraintMsg_DependentColumn); ok {
			return x.DependentColumn
		}
	}
	return ""
}

func (x *MultiColumnValueConstraintMsg) GetReference() isMultiColumnValueConstraintMsg_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *MultiColumnValueConstraintMsg) GetValue() float64 {
	if x != nil {
		if x, ok := x.Reference.(*MultiColumnValueConstraintMsg_Value); ok {
			return x.Value
		}
	}
	return 0
}

func (x *MultiColumnValueConstraintMsg) GetValueSet() *structpb.ListValue {
	if x != nil {
		if x, ok := x.Reference.(*MultiColumnValueConstraintMsg_ValueSet); ok {
			return x.ValueSet
		}
	}
	return nil
}

func (x *MultiColumnValueConstraintMsg) GetReferenceColumns() *structpb.ListValue {
	if x != nil {
		if x, ok := x.Reference.(*MultiColumnValueConstraintMsg_ReferenceColumns); ok {
			return x.ReferenceColumns
		}
	}
	return nil
}

func (x *MultiColumnValueConstraintMsg) GetOp() Op {
	if x != nil {
		return x.Op
	}
	return Op_unused
}

func (x *MultiColumnValueConstraintMsg) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *MultiColumnValueConstraintMsg) GetInternalDependentColumnsOp() Op {
	if x != nil {
		return x.InternalDependentColumnsOp
	}
	return Op_unused
}

func (x *MultiColumnValueConstraintMsg) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MultiColumnValueConstraintMsg) GetFailures() uint32 {
	if x != nil {
		return x.Failures
	}
	return 0
}

type isMultiColumnValueConstraintMsg_Dependent interface {
	isMultiColumnValueConstraintMsg_Dependent()
}

type MultiColumnValueConstraintMsg_DependentColumns struct {
	DependentColumns *structpb.ListValue `protobuf:"bytes,2,opt,name=dependent_columns,json=dependentColumns,proto3,oneof"`
}

type MultiColumnValueConstraintMsg_DependentColumn struct {
	DependentColumn string `protobuf:"bytes,3,opt,name=dependent_column,json=dependentColumn,proto3,oneof"`
}

func (*MultiColumnValueConstraintMsg_DependentColumns) isMultiColumnValueConstraintMsg_Dependent() {}

func (*MultiColumnValueConstraintMsg_DependentColumn) isMultiColumnValueConstraintMsg_Dependent() {}

type isMultiColumnValueConstraintMsg_Reference interface {
	isMultiColumnValueConstraintMsg_Reference()
}

type MultiColumnValueConstraintMsg_Value struct {
	Value float64 `protobuf:"fixed64,6,opt,name=value,proto3,oneof"`
}

type MultiColumnValueConstraintMsg_ValueSet struct {
	ValueSet *structpb.ListValue `protobuf:"bytes,7,opt,name=value_set,json=valueSet,proto3,oneof"`
}

type MultiColumnValueConstraintMsg_ReferenceColumns struct {
	ReferenceColumns *structpb.ListValue `protobuf:"bytes,8,opt,name=reference_columns,json=referenceColumns,proto3,oneof"`
}

func (*MultiColumnValueConstraintMsg_Value) isMultiColumnValueConstraintMsg_Reference() {}

func (*MultiColumnValueConstraintMsg_ValueSet) isMultiColumnValueConstraintMsg_Reference() {}

func (*MultiColumnValueConstraintMsg_ReferenceColumns) isMultiColumnValueConstraintMsg_Reference() {}

type ValueConstraintMsgs struct {
	state                  protoimpl.MessageState           `protogen:"open.v1"`
	Constraints            []*ValueConstraintMsg            `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	MultiColumnConstraints []*MultiColumnValueConstraintMsg `protobuf:"bytes,2,rep,name=multi_column_constraints,json=multiColumnConstraints,proto3" json:"multi_column_constraints,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValueConstraintMsgs) Reset() {
	*x = ValueConstraintMsgs{}
	mi := &file_v0_constraints_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueConstraintMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueConstraintMsgs) ProtoMessage() {}

func (x *ValueConstraintMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueConstraintMsgs.ProtoReflect.Descriptor instead.
func (*ValueConstraintMsgs) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{7}
}

func (x *ValueConstraintMsgs) GetConstraints() []*ValueConstraintMsg {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *ValueConstraintMsgs) GetMultiColumnConstraints() []*MultiColumnValueConstraintMsg {
	if x != nil {
		return x.MultiColumnConstraints
	}
	return nil
}

type SummaryConstraintMsgs struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Constraints   []*SummaryConstraintMsg `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryConstraintMsgs) Reset() {
	*x = SummaryConstraintMsgs{}
	mi := &file_v0_constraints_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryConstraintMsgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryConstraintMsgs) ProtoMessage() {}

func (x *SummaryConstraintMsgs) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryConstraintMsgs.ProtoReflect.Descriptor instead.
func (*SummaryConstraintMsgs) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{8}
}

func (x *SummaryConstraintMsgs) GetConstraints() []*SummaryConstraintMsg {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type DatasetConstraintMsg struct {
	state                       protoimpl.MessageState            `protogen:"open.v1"`
	Properties                  *DatasetPropertiesV0              `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	ValueConstraints            map[string]*ValueConstraintMsgs   `protobuf:"bytes,2,rep,name=value_constraints,json=valueConstraints,proto3" json:"value_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SummaryConstraints          map[string]*SummaryConstraintMsgs `protobuf:"bytes,3,rep,name=summary_constraints,json=summaryConstraints,proto3" json:"summary_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TableShapeConstraints       *SummaryConstraintMsgs            `protobuf:"bytes,4,opt,name=table_shape_constraints,json=tableShapeConstraints,proto3" json:"table_shape_constraints,omitempty"`
	MultiColumnValueConstraints *ValueConstraintMsgs              `protobuf:"bytes,5,opt,name=multi_column_value_constraints,json=multiColumnValueConstraints,proto3" json:"multi_column_value_constraints,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *DatasetConstraintMsg) Reset() {
	*x = DatasetConstraintMsg{}
	mi := &file_v0_constraints_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConstraintMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConstraintMsg) ProtoMessage() {}

func (x *DatasetConstraintMsg) ProtoReflect() protoreflect.Message {
	mi := &file_v0_constraints_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConstraintMsg.ProtoReflect.Descriptor instead.
func (*DatasetConstraintMsg) Descriptor() ([]byte, []int) {
	return file_v0_constraints_proto_rawDescGZIP(), []int{9}
}

func (x *DatasetConstraintMsg) GetProperties() *DatasetPropertiesV0 {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *DatasetConstraintMsg) GetValueConstraints() map[string]*ValueConstraintMsgs {
	if x != nil {
		return x.ValueConstraints
	}
	return nil
}

func (x *DatasetConstraintMsg) GetSummaryConstraints() map[string]*SummaryConstraintMsgs {
	if x != nil {
		return x.SummaryConstraints
	}
	return nil
}

func (x *DatasetConstraintMsg) GetTableShapeConstraints() *SummaryConstraintMsgs {
	if x != nil {
		return x.TableShapeConstraints
	}
	return nil
}

func (x *DatasetConstraintMsg) GetMultiColumnValueConstraints() *ValueConstraintMsgs {
	if x != nil {
		return x.MultiColumnValueConstraints
	}
	return nil
}

var File_v0_constraints_proto protoreflect.FileDescriptor

var file_v0_constraints_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x76, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76, 0x30, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x30, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x04, 0x0a, 0x14,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x03,
	0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x01, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59,
	0x0a, 0x26, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4b, 0x6c, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x73, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x22, 0xbd, 0x01, 0x0a, 0x24, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x36, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x1b, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21,
	0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x10, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x03, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x8c, 0x04, 0x0a, 0x1d, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x03, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x5f, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x03, 0x2e, 0x4f, 0x70,
	0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4f, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x50, 0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0xeb, 0x04, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x56, 0x30, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x13,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x17,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x1e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x1b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x17, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0xc5, 0x01, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02,
	0x47, 0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x54, 0x57, 0x4e, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0c, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x0d, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x10,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x11, 0x42, 0x46, 0x0a, 0x1e, 0x63, 0x6f, 0x6d,
	0x2e, 0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x0b, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x01, 0x5a, 0x15, 0x63, 0x6d, 0x64, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v0_constraints_proto_rawDescOnce sync.Once
	file_v0_constraints_proto_rawDescData []byte
)

func file_v0_constraints_proto_rawDescGZIP() []byte {
	file_v0_constraints_proto_rawDescOnce.Do(func() {
		file_v0_constraints_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v0_constraints_proto_rawDesc), len(file_v0_constraints_proto_rawDesc)))
	})
	return file_v0_constraints_proto_rawDescData
}

var file_v0_constraints_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v0_constraints_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v0_constraints_proto_goTypes = []any{
	(Op)(0),                      // 0: Op
	(*SummaryConstraintMsg)(nil), // 1: SummaryConstraintMsg
	(*ReferenceDistributionContinuousMessage)(nil), // 2: ReferenceDistributionContinuousMessage
	(*ReferenceDistributionDiscreteMessage)(nil),   // 3: ReferenceDistributionDiscreteMessage
	(*SummaryBetweenConstraintMsg)(nil),            // 4: SummaryBetweenConstraintMsg
	(*ApplyFunctionMsg)(nil),                       // 5: ApplyFunctionMsg
	(*ValueConstraintMsg)(nil),                     // 6: ValueConstraintMsg
	(*MultiColumnValueConstraintMsg)(nil),          // 7: MultiColumnValueConstraintMsg
	(*ValueConstraintMsgs)(nil),                    // 8: ValueConstraintMsgs
	(*SummaryConstraintMsgs)(nil),                  // 9: SummaryConstraintMsgs
	(*DatasetConstraintMsg)(nil),                   // 10: DatasetConstraintMsg
	nil,                                            // 11: DatasetConstraintMsg.ValueConstraintsEntry
	nil,                                            // 12: DatasetConstraintMsg.SummaryConstraintsEntry
	(*structpb.ListValue)(nil),                     // 13: google.protobuf.ListValue
	(*KllFloatsSketchMessage)(nil),                 // 14: KllFloatsSketchMessage
	(*FrequentItemsSummary)(nil),                   // 15: FrequentItemsSummary
	(*UniqueCountSummary)(nil),                     // 16: UniqueCountSummary
	(*DatasetPropertiesV0)(nil),                    // 17: DatasetPropertiesV0
}
var file_v0_constraints_proto_depIdxs = []int32{
	4,  // 0: SummaryConstraintMsg.between:type_name -> SummaryBetweenConstraintMsg
	13, // 1: SummaryConstraintMsg.reference_set:type_name -> google.protobuf.ListValue
	0,  // 2: SummaryConstraintMsg.op:type_name -> Op
	2,  // 3: SummaryConstraintMsg.continuous_distribution:type_name -> ReferenceDistributionContinuousMessage
	3,  // 4: SummaryConstraintMsg.discrete_distribution:type_name -> ReferenceDistributionDiscreteMessage
	14, // 5: ReferenceDistributionContinuousMessage.sketch:type_name -> KllFloatsSketchMessage
	15, // 6: ReferenceDistributionDiscreteMessage.frequent_items:type_name -> FrequentItemsSummary
	16, // 7: ReferenceDistributionDiscreteMessage.unique_count:type_name -> UniqueCountSummary
	13, // 8: ValueConstraintMsg.value_set:type_name -> google.protobuf.ListValue
	5,  // 9: ValueConstraintMsg.function:type_name -> ApplyFunctionMsg
	0,  // 10: ValueConstraintMsg.op:type_name -> Op
	13, // 11: MultiColumnValueConstraintMsg.dependent_columns:type_name -> google.protobuf.ListValue
	13, // 12: MultiColumnValueConstraintMsg.value_set:type_name -> google.protobuf.ListValue
	13, // 13: MultiColumnValueConstraintMsg.reference_columns:type_name -> google.protobuf.ListValue
	0,  // 14: MultiColumnValueConstraintMsg.op:type_name -> Op
	0,  // 15: MultiColumnValueConstraintMsg.internal_dependent_columns_op:type_name -> Op
	6,  // 16: ValueConstraintMsgs.constraints:type_name -> ValueConstraintMsg
	7,  // 17: ValueConstraintMsgs.multi_column_constraints:type_name -> MultiColumnValueConstraintMsg
	1,  // 18: SummaryConstraintMsgs.constraints:type_name -> SummaryConstraintMsg
	17, // 19: DatasetConstraintMsg.properties:type_name -> DatasetPropertiesV0
	11, // 20: DatasetConstraintMsg.value_constraints:type_name -> DatasetConstraintMsg.ValueConstraintsEntry
	12, // 21: DatasetConstraintMsg.summary_constraints:type_name -> DatasetConstraintMsg.SummaryConstraintsEntry
	9,  // 22: DatasetConstraintMsg.table_shape_constraints:type_name -> SummaryConstraintMsgs
	8,  // 23: DatasetConstraintMsg.multi_column_value_constraints:type_name -> ValueConstraintMsgs
	8,  // 24: DatasetConstraintMsg.ValueConstraintsEntry.value:type_name -> ValueConstraintMsgs
	9,  // 25: DatasetConstraintMsg.SummaryConstraintsEntry.value:type_name -> SummaryConstraintMsgs
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_v0_constraints_proto_init() }
func file_v0_constraints_proto_init() {
	if File_v0_constraints_proto != nil {
		return
	}
	file_v0_messages_proto_init()
	file_v0_summaries_proto_init()
	file_v0_constraints_proto_msgTypes[0].OneofWrappers = []any{
		(*SummaryConstraintMsg_SecondField)(nil),
		(*SummaryConstraintMsg_Value)(nil),
		(*SummaryConstraintMsg_Between)(nil),
		(*SummaryConstraintMsg_ReferenceSet)(nil),
		(*SummaryConstraintMsg_ValueStr)(nil),
		(*SummaryConstraintMsg_ContinuousDistribution)(nil),
		(*SummaryConstraintMsg_DiscreteDistribution)(nil),
	}
	file_v0_constraints_proto_msgTypes[3].OneofWrappers = []any{
		(*SummaryBetweenConstraintMsg_SecondField)(nil),
		(*SummaryBetweenConstraintMsg_LowerValue)(nil),
		(*SummaryBetweenConstraintMsg_ThirdField)(nil),
		(*SummaryBetweenConstraintMsg_UpperValue)(nil),
	}
	file_v0_constraints_proto_msgTypes[5].OneofWrappers = []any{
		(*ValueConstraintMsg_Value)(nil),
		(*ValueConstraintMsg_RegexPattern)(nil),
		(*ValueConstraintMsg_ValueSet)(nil),
		(*ValueConstraintMsg_Function)(nil),
	}
	file_v0_constraints_proto_msgTypes[6].OneofWrappers = []any{
		(*MultiColumnValueConstraintMsg_DependentColumns)(nil),
		(*MultiColumnValueConstraintMsg_DependentColumn)(nil),
		(*MultiColumnValueConstraintMsg_Value)(nil),
		(*MultiColumnValueConstraintMsg_ValueSet)(nil),
		(*MultiColumnValueConstraintMsg_ReferenceColumns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v0_constraints_proto_rawDesc), len(file_v0_constraints_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v0_constraints_proto_goTypes,
		DependencyIndexes: file_v0_constraints_proto_depIdxs,
		EnumInfos:         file_v0_constraints_proto_enumTypes,
		MessageInfos:      file_v0_constraints_proto_msgTypes,
	}.Build()
	File_v0_constraints_proto = out.File
	file_v0_constraints_proto_goTypes = nil
	file_v0_constraints_proto_depIdxs = nil
}
