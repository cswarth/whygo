// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v4.25.3
// source: v0_summaries.proto

package whylogs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UniqueCountSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Estimate      float64                `protobuf:"fixed64,1,opt,name=estimate,proto3" json:"estimate,omitempty"`
	Upper         float64                `protobuf:"fixed64,2,opt,name=upper,proto3" json:"upper,omitempty"`
	Lower         float64                `protobuf:"fixed64,3,opt,name=lower,proto3" json:"lower,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UniqueCountSummary) Reset() {
	*x = UniqueCountSummary{}
	mi := &file_v0_summaries_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniqueCountSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueCountSummary) ProtoMessage() {}

func (x *UniqueCountSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueCountSummary.ProtoReflect.Descriptor instead.
func (*UniqueCountSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{0}
}

func (x *UniqueCountSummary) GetEstimate() float64 {
	if x != nil {
		return x.Estimate
	}
	return 0
}

func (x *UniqueCountSummary) GetUpper() float64 {
	if x != nil {
		return x.Upper
	}
	return 0
}

func (x *UniqueCountSummary) GetLower() float64 {
	if x != nil {
		return x.Lower
	}
	return 0
}

type FrequentStringsSummary struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Items         []*FrequentStringsSummary_FrequentItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentStringsSummary) Reset() {
	*x = FrequentStringsSummary{}
	mi := &file_v0_summaries_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentStringsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentStringsSummary) ProtoMessage() {}

func (x *FrequentStringsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentStringsSummary.ProtoReflect.Descriptor instead.
func (*FrequentStringsSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{1}
}

func (x *FrequentStringsSummary) GetItems() []*FrequentStringsSummary_FrequentItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FrequentNumbersSummary struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Doubles       []*FrequentNumbersSummary_FrequentDoubleItem `protobuf:"bytes,1,rep,name=doubles,proto3" json:"doubles,omitempty"`
	Longs         []*FrequentNumbersSummary_FrequentLongItem   `protobuf:"bytes,2,rep,name=longs,proto3" json:"longs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentNumbersSummary) Reset() {
	*x = FrequentNumbersSummary{}
	mi := &file_v0_summaries_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentNumbersSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentNumbersSummary) ProtoMessage() {}

func (x *FrequentNumbersSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentNumbersSummary.ProtoReflect.Descriptor instead.
func (*FrequentNumbersSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{2}
}

func (x *FrequentNumbersSummary) GetDoubles() []*FrequentNumbersSummary_FrequentDoubleItem {
	if x != nil {
		return x.Doubles
	}
	return nil
}

func (x *FrequentNumbersSummary) GetLongs() []*FrequentNumbersSummary_FrequentLongItem {
	if x != nil {
		return x.Longs
	}
	return nil
}

type FrequentItemsSummary struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Items         []*FrequentItemsSummary_FrequentItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentItemsSummary) Reset() {
	*x = FrequentItemsSummary{}
	mi := &file_v0_summaries_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentItemsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentItemsSummary) ProtoMessage() {}

func (x *FrequentItemsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentItemsSummary.ProtoReflect.Descriptor instead.
func (*FrequentItemsSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{3}
}

func (x *FrequentItemsSummary) GetItems() []*FrequentItemsSummary_FrequentItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CharPosSummary struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	CharacterList string                    `protobuf:"bytes,1,opt,name=character_list,json=characterList,proto3" json:"character_list,omitempty"`
	CharPosMap    map[string]*NumberSummary `protobuf:"bytes,2,rep,name=char_pos_map,json=charPosMap,proto3" json:"char_pos_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharPosSummary) Reset() {
	*x = CharPosSummary{}
	mi := &file_v0_summaries_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharPosSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharPosSummary) ProtoMessage() {}

func (x *CharPosSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharPosSummary.ProtoReflect.Descriptor instead.
func (*CharPosSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{4}
}

func (x *CharPosSummary) GetCharacterList() string {
	if x != nil {
		return x.CharacterList
	}
	return ""
}

func (x *CharPosSummary) GetCharPosMap() map[string]*NumberSummary {
	if x != nil {
		return x.CharPosMap
	}
	return nil
}

type StringsSummary struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	UniqueCount    *UniqueCountSummary     `protobuf:"bytes,1,opt,name=unique_count,json=uniqueCount,proto3" json:"unique_count,omitempty"`
	Frequent       *FrequentStringsSummary `protobuf:"bytes,2,opt,name=frequent,proto3" json:"frequent,omitempty"`
	Length         *NumberSummary          `protobuf:"bytes,3,opt,name=length,proto3" json:"length,omitempty"`
	TokenLength    *NumberSummary          `protobuf:"bytes,4,opt,name=token_length,json=tokenLength,proto3" json:"token_length,omitempty"`
	CharPosTracker *CharPosSummary         `protobuf:"bytes,5,opt,name=char_pos_tracker,json=charPosTracker,proto3" json:"char_pos_tracker,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StringsSummary) Reset() {
	*x = StringsSummary{}
	mi := &file_v0_summaries_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringsSummary) ProtoMessage() {}

func (x *StringsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringsSummary.ProtoReflect.Descriptor instead.
func (*StringsSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{5}
}

func (x *StringsSummary) GetUniqueCount() *UniqueCountSummary {
	if x != nil {
		return x.UniqueCount
	}
	return nil
}

func (x *StringsSummary) GetFrequent() *FrequentStringsSummary {
	if x != nil {
		return x.Frequent
	}
	return nil
}

func (x *StringsSummary) GetLength() *NumberSummary {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *StringsSummary) GetTokenLength() *NumberSummary {
	if x != nil {
		return x.TokenLength
	}
	return nil
}

func (x *StringsSummary) GetCharPosTracker() *CharPosSummary {
	if x != nil {
		return x.CharPosTracker
	}
	return nil
}

type SchemaSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InferredType  *InferredType          `protobuf:"bytes,1,opt,name=inferred_type,json=inferredType,proto3" json:"inferred_type,omitempty"`
	TypeCounts    map[string]int64       `protobuf:"bytes,2,rep,name=type_counts,json=typeCounts,proto3" json:"type_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaSummary) Reset() {
	*x = SchemaSummary{}
	mi := &file_v0_summaries_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaSummary) ProtoMessage() {}

func (x *SchemaSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaSummary.ProtoReflect.Descriptor instead.
func (*SchemaSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{6}
}

func (x *SchemaSummary) GetInferredType() *InferredType {
	if x != nil {
		return x.InferredType
	}
	return nil
}

func (x *SchemaSummary) GetTypeCounts() map[string]int64 {
	if x != nil {
		return x.TypeCounts
	}
	return nil
}

type HistogramSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         float64                `protobuf:"fixed64,1,opt,name=start,proto3" json:"start,omitempty"`
	End           float64                `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`
	Width         float64                `protobuf:"fixed64,3,opt,name=width,proto3" json:"width,omitempty"`
	Counts        []int64                `protobuf:"varint,4,rep,packed,name=counts,proto3" json:"counts,omitempty"`
	Max           float64                `protobuf:"fixed64,5,opt,name=max,proto3" json:"max,omitempty"`
	Min           float64                `protobuf:"fixed64,6,opt,name=min,proto3" json:"min,omitempty"`
	Bins          []float64              `protobuf:"fixed64,7,rep,packed,name=bins,proto3" json:"bins,omitempty"`
	N             int64                  `protobuf:"varint,8,opt,name=n,proto3" json:"n,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistogramSummary) Reset() {
	*x = HistogramSummary{}
	mi := &file_v0_summaries_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramSummary) ProtoMessage() {}

func (x *HistogramSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramSummary.ProtoReflect.Descriptor instead.
func (*HistogramSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{7}
}

func (x *HistogramSummary) GetStart() float64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *HistogramSummary) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *HistogramSummary) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *HistogramSummary) GetCounts() []int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *HistogramSummary) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *HistogramSummary) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *HistogramSummary) GetBins() []float64 {
	if x != nil {
		return x.Bins
	}
	return nil
}

func (x *HistogramSummary) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

type QuantileSummary struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Quantiles      []float64              `protobuf:"fixed64,1,rep,packed,name=quantiles,proto3" json:"quantiles,omitempty"`
	QuantileValues []float64              `protobuf:"fixed64,2,rep,packed,name=quantile_values,json=quantileValues,proto3" json:"quantile_values,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QuantileSummary) Reset() {
	*x = QuantileSummary{}
	mi := &file_v0_summaries_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuantileSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantileSummary) ProtoMessage() {}

func (x *QuantileSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantileSummary.ProtoReflect.Descriptor instead.
func (*QuantileSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{8}
}

func (x *QuantileSummary) GetQuantiles() []float64 {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *QuantileSummary) GetQuantileValues() []float64 {
	if x != nil {
		return x.QuantileValues
	}
	return nil
}

type NumberSummary struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Count           uint64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Min             float64                 `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	Max             float64                 `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`
	Mean            float64                 `protobuf:"fixed64,4,opt,name=mean,proto3" json:"mean,omitempty"`
	Stddev          float64                 `protobuf:"fixed64,5,opt,name=stddev,proto3" json:"stddev,omitempty"`
	Histogram       *HistogramSummary       `protobuf:"bytes,6,opt,name=histogram,proto3" json:"histogram,omitempty"`
	UniqueCount     *UniqueCountSummary     `protobuf:"bytes,7,opt,name=unique_count,json=uniqueCount,proto3" json:"unique_count,omitempty"`
	Quantiles       *QuantileSummary        `protobuf:"bytes,8,opt,name=quantiles,proto3" json:"quantiles,omitempty"`
	FrequentNumbers *FrequentNumbersSummary `protobuf:"bytes,9,opt,name=frequent_numbers,json=frequentNumbers,proto3" json:"frequent_numbers,omitempty"`
	IsDiscrete      bool                    `protobuf:"varint,10,opt,name=is_discrete,json=isDiscrete,proto3" json:"is_discrete,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NumberSummary) Reset() {
	*x = NumberSummary{}
	mi := &file_v0_summaries_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumberSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberSummary) ProtoMessage() {}

func (x *NumberSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberSummary.ProtoReflect.Descriptor instead.
func (*NumberSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{9}
}

func (x *NumberSummary) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NumberSummary) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *NumberSummary) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *NumberSummary) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *NumberSummary) GetStddev() float64 {
	if x != nil {
		return x.Stddev
	}
	return 0
}

func (x *NumberSummary) GetHistogram() *HistogramSummary {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *NumberSummary) GetUniqueCount() *UniqueCountSummary {
	if x != nil {
		return x.UniqueCount
	}
	return nil
}

func (x *NumberSummary) GetQuantiles() *QuantileSummary {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *NumberSummary) GetFrequentNumbers() *FrequentNumbersSummary {
	if x != nil {
		return x.FrequentNumbers
	}
	return nil
}

func (x *NumberSummary) GetIsDiscrete() bool {
	if x != nil {
		return x.IsDiscrete
	}
	return false
}

type ColumnSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Counters      *CountersV0            `protobuf:"bytes,1,opt,name=counters,proto3" json:"counters,omitempty"`
	Schema        *SchemaSummary         `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	NumberSummary *NumberSummary         `protobuf:"bytes,3,opt,name=number_summary,json=numberSummary,proto3" json:"number_summary,omitempty"`
	StringSummary *StringsSummary        `protobuf:"bytes,4,opt,name=string_summary,json=stringSummary,proto3" json:"string_summary,omitempty"`
	FrequentItems *FrequentItemsSummary  `protobuf:"bytes,5,opt,name=frequent_items,json=frequentItems,proto3" json:"frequent_items,omitempty"`
	UniqueCount   *UniqueCountSummary    `protobuf:"bytes,6,opt,name=unique_count,json=uniqueCount,proto3" json:"unique_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnSummary) Reset() {
	*x = ColumnSummary{}
	mi := &file_v0_summaries_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSummary) ProtoMessage() {}

func (x *ColumnSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSummary.ProtoReflect.Descriptor instead.
func (*ColumnSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{10}
}

func (x *ColumnSummary) GetCounters() *CountersV0 {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *ColumnSummary) GetSchema() *SchemaSummary {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ColumnSummary) GetNumberSummary() *NumberSummary {
	if x != nil {
		return x.NumberSummary
	}
	return nil
}

func (x *ColumnSummary) GetStringSummary() *StringsSummary {
	if x != nil {
		return x.StringSummary
	}
	return nil
}

func (x *ColumnSummary) GetFrequentItems() *FrequentItemsSummary {
	if x != nil {
		return x.FrequentItems
	}
	return nil
}

func (x *ColumnSummary) GetUniqueCount() *UniqueCountSummary {
	if x != nil {
		return x.UniqueCount
	}
	return nil
}

type DatasetSummary struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Properties    *DatasetPropertiesV0      `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	Columns       map[string]*ColumnSummary `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Model         *ModelSummary             `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatasetSummary) Reset() {
	*x = DatasetSummary{}
	mi := &file_v0_summaries_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSummary) ProtoMessage() {}

func (x *DatasetSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSummary.ProtoReflect.Descriptor instead.
func (*DatasetSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{11}
}

func (x *DatasetSummary) GetProperties() *DatasetPropertiesV0 {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *DatasetSummary) GetColumns() map[string]*ColumnSummary {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DatasetSummary) GetModel() *ModelSummary {
	if x != nil {
		return x.Model
	}
	return nil
}

type ModelSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metrics       *MetricsSummary        `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelSummary) Reset() {
	*x = ModelSummary{}
	mi := &file_v0_summaries_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSummary) ProtoMessage() {}

func (x *ModelSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSummary.ProtoReflect.Descriptor instead.
func (*ModelSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{12}
}

func (x *ModelSummary) GetMetrics() *MetricsSummary {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type MetricsSummary struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ModelType       ModelType              `protobuf:"varint,1,opt,name=model_type,json=modelType,proto3,enum=ModelType" json:"model_type,omitempty"`
	RocFprTpr       *ROCCurve              `protobuf:"bytes,2,opt,name=roc_fpr_tpr,json=rocFprTpr,proto3" json:"roc_fpr_tpr,omitempty"`
	RecallPrec      *RecallCurve           `protobuf:"bytes,3,opt,name=recall_prec,json=recallPrec,proto3" json:"recall_prec,omitempty"`
	ConfusionMatrix *ConfusionMatrix       `protobuf:"bytes,4,opt,name=confusion_matrix,json=confusionMatrix,proto3" json:"confusion_matrix,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricsSummary) Reset() {
	*x = MetricsSummary{}
	mi := &file_v0_summaries_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSummary) ProtoMessage() {}

func (x *MetricsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsSummary.ProtoReflect.Descriptor instead.
func (*MetricsSummary) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{13}
}

func (x *MetricsSummary) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNKNOWN
}

func (x *MetricsSummary) GetRocFprTpr() *ROCCurve {
	if x != nil {
		return x.RocFprTpr
	}
	return nil
}

func (x *MetricsSummary) GetRecallPrec() *RecallCurve {
	if x != nil {
		return x.RecallPrec
	}
	return nil
}

func (x *MetricsSummary) GetConfusionMatrix() *ConfusionMatrix {
	if x != nil {
		return x.ConfusionMatrix
	}
	return nil
}

type ConfusionMatrix struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Labels           []string               `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	TargetField      string                 `protobuf:"bytes,2,opt,name=target_field,json=targetField,proto3" json:"target_field,omitempty"`
	PredictionsField string                 `protobuf:"bytes,3,opt,name=predictions_field,json=predictionsField,proto3" json:"predictions_field,omitempty"`
	ScoreField       string                 `protobuf:"bytes,4,opt,name=score_field,json=scoreField,proto3" json:"score_field,omitempty"`
	Counts           []*structpb.ListValue  `protobuf:"bytes,5,rep,name=counts,proto3" json:"counts,omitempty"` // e.g. [[33, 6], [11, 27]]
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConfusionMatrix) Reset() {
	*x = ConfusionMatrix{}
	mi := &file_v0_summaries_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfusionMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfusionMatrix) ProtoMessage() {}

func (x *ConfusionMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfusionMatrix.ProtoReflect.Descriptor instead.
func (*ConfusionMatrix) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{14}
}

func (x *ConfusionMatrix) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ConfusionMatrix) GetTargetField() string {
	if x != nil {
		return x.TargetField
	}
	return ""
}

func (x *ConfusionMatrix) GetPredictionsField() string {
	if x != nil {
		return x.PredictionsField
	}
	return ""
}

func (x *ConfusionMatrix) GetScoreField() string {
	if x != nil {
		return x.ScoreField
	}
	return ""
}

func (x *ConfusionMatrix) GetCounts() []*structpb.ListValue {
	if x != nil {
		return x.Counts
	}
	return nil
}

type ROCCurve struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// e.g.   "values": [ [1, 0.42857],  [1, 0.42857], ... ]
	Values        []*structpb.ListValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ROCCurve) Reset() {
	*x = ROCCurve{}
	mi := &file_v0_summaries_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ROCCurve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROCCurve) ProtoMessage() {}

func (x *ROCCurve) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROCCurve.ProtoReflect.Descriptor instead.
func (*ROCCurve) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{15}
}

func (x *ROCCurve) GetValues() []*structpb.ListValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type RecallCurve struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// e.g.   "values": [ [1, 1],  [1, 1], ... ]
	Values        []*structpb.ListValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecallCurve) Reset() {
	*x = RecallCurve{}
	mi := &file_v0_summaries_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecallCurve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecallCurve) ProtoMessage() {}

func (x *RecallCurve) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecallCurve.ProtoReflect.Descriptor instead.
func (*RecallCurve) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{16}
}

func (x *RecallCurve) GetValues() []*structpb.ListValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type DatasetSummaries struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Profiles      map[string]*DatasetSummary `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatasetSummaries) Reset() {
	*x = DatasetSummaries{}
	mi := &file_v0_summaries_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetSummaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSummaries) ProtoMessage() {}

func (x *DatasetSummaries) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSummaries.ProtoReflect.Descriptor instead.
func (*DatasetSummaries) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{17}
}

func (x *DatasetSummaries) GetProfiles() map[string]*DatasetSummary {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type FrequentStringsSummary_FrequentItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Estimate      float64                `protobuf:"fixed64,2,opt,name=estimate,proto3" json:"estimate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentStringsSummary_FrequentItem) Reset() {
	*x = FrequentStringsSummary_FrequentItem{}
	mi := &file_v0_summaries_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentStringsSummary_FrequentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentStringsSummary_FrequentItem) ProtoMessage() {}

func (x *FrequentStringsSummary_FrequentItem) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentStringsSummary_FrequentItem.ProtoReflect.Descriptor instead.
func (*FrequentStringsSummary_FrequentItem) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FrequentStringsSummary_FrequentItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FrequentStringsSummary_FrequentItem) GetEstimate() float64 {
	if x != nil {
		return x.Estimate
	}
	return 0
}

type FrequentNumbersSummary_FrequentDoubleItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Estimate      int64                  `protobuf:"varint,1,opt,name=estimate,proto3" json:"estimate,omitempty"`
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Rank          int32                  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentNumbersSummary_FrequentDoubleItem) Reset() {
	*x = FrequentNumbersSummary_FrequentDoubleItem{}
	mi := &file_v0_summaries_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentNumbersSummary_FrequentDoubleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentNumbersSummary_FrequentDoubleItem) ProtoMessage() {}

func (x *FrequentNumbersSummary_FrequentDoubleItem) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentNumbersSummary_FrequentDoubleItem.ProtoReflect.Descriptor instead.
func (*FrequentNumbersSummary_FrequentDoubleItem) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FrequentNumbersSummary_FrequentDoubleItem) GetEstimate() int64 {
	if x != nil {
		return x.Estimate
	}
	return 0
}

func (x *FrequentNumbersSummary_FrequentDoubleItem) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FrequentNumbersSummary_FrequentDoubleItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type FrequentNumbersSummary_FrequentLongItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Estimate      int64                  `protobuf:"varint,1,opt,name=estimate,proto3" json:"estimate,omitempty"`
	Value         int64                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Rank          int32                  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentNumbersSummary_FrequentLongItem) Reset() {
	*x = FrequentNumbersSummary_FrequentLongItem{}
	mi := &file_v0_summaries_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentNumbersSummary_FrequentLongItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentNumbersSummary_FrequentLongItem) ProtoMessage() {}

func (x *FrequentNumbersSummary_FrequentLongItem) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentNumbersSummary_FrequentLongItem.ProtoReflect.Descriptor instead.
func (*FrequentNumbersSummary_FrequentLongItem) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{2, 1}
}

func (x *FrequentNumbersSummary_FrequentLongItem) GetEstimate() int64 {
	if x != nil {
		return x.Estimate
	}
	return 0
}

func (x *FrequentNumbersSummary_FrequentLongItem) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FrequentNumbersSummary_FrequentLongItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type FrequentItemsSummary_FrequentItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Estimate      int64                  `protobuf:"varint,1,opt,name=estimate,proto3" json:"estimate,omitempty"`
	JsonValue     string                 `protobuf:"bytes,2,opt,name=json_value,json=jsonValue,proto3" json:"json_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentItemsSummary_FrequentItem) Reset() {
	*x = FrequentItemsSummary_FrequentItem{}
	mi := &file_v0_summaries_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentItemsSummary_FrequentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentItemsSummary_FrequentItem) ProtoMessage() {}

func (x *FrequentItemsSummary_FrequentItem) ProtoReflect() protoreflect.Message {
	mi := &file_v0_summaries_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentItemsSummary_FrequentItem.ProtoReflect.Descriptor instead.
func (*FrequentItemsSummary_FrequentItem) Descriptor() ([]byte, []int) {
	return file_v0_summaries_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FrequentItemsSummary_FrequentItem) GetEstimate() int64 {
	if x != nil {
		return x.Estimate
	}
	return 0
}

func (x *FrequentItemsSummary_FrequentItem) GetJsonValue() string {
	if x != nil {
		return x.JsonValue
	}
	return ""
}

var File_v0_summaries_proto protoreflect.FileDescriptor

var file_v0_summaries_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x76, 0x30, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76, 0x30, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3a,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x40, 0x0a, 0x0c, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x22, 0xd4, 0x02, 0x0a,
	0x16, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x05, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x1a, 0x5a, 0x0a,
	0x12, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0x58, 0x0a, 0x10, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x49, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x4d,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x02,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x36, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x08, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6e, 0x22, 0x58, 0x0a, 0x0f, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6d, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0x2f, 0x0a, 0x09,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a,
	0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x56, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0e,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x30, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x4a, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0xd2, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x0b, 0x72, 0x6f, 0x63, 0x5f, 0x66, 0x70, 0x72, 0x5f, 0x74, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x4f, 0x43, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x09, 0x72,
	0x6f, 0x63, 0x46, 0x70, 0x72, 0x54, 0x70, 0x72, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x08, 0x52, 0x4f, 0x43, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x41, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x50, 0x01, 0x5a, 0x15, 0x63, 0x6d, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_v0_summaries_proto_rawDescOnce sync.Once
	file_v0_summaries_proto_rawDescData []byte
)

func file_v0_summaries_proto_rawDescGZIP() []byte {
	file_v0_summaries_proto_rawDescOnce.Do(func() {
		file_v0_summaries_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v0_summaries_proto_rawDesc), len(file_v0_summaries_proto_rawDesc)))
	})
	return file_v0_summaries_proto_rawDescData
}

var file_v0_summaries_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_v0_summaries_proto_goTypes = []any{
	(*UniqueCountSummary)(nil),                        // 0: UniqueCountSummary
	(*FrequentStringsSummary)(nil),                    // 1: FrequentStringsSummary
	(*FrequentNumbersSummary)(nil),                    // 2: FrequentNumbersSummary
	(*FrequentItemsSummary)(nil),                      // 3: FrequentItemsSummary
	(*CharPosSummary)(nil),                            // 4: CharPosSummary
	(*StringsSummary)(nil),                            // 5: StringsSummary
	(*SchemaSummary)(nil),                             // 6: SchemaSummary
	(*HistogramSummary)(nil),                          // 7: HistogramSummary
	(*QuantileSummary)(nil),                           // 8: QuantileSummary
	(*NumberSummary)(nil),                             // 9: NumberSummary
	(*ColumnSummary)(nil),                             // 10: ColumnSummary
	(*DatasetSummary)(nil),                            // 11: DatasetSummary
	(*ModelSummary)(nil),                              // 12: ModelSummary
	(*MetricsSummary)(nil),                            // 13: MetricsSummary
	(*ConfusionMatrix)(nil),                           // 14: ConfusionMatrix
	(*ROCCurve)(nil),                                  // 15: ROCCurve
	(*RecallCurve)(nil),                               // 16: RecallCurve
	(*DatasetSummaries)(nil),                          // 17: DatasetSummaries
	(*FrequentStringsSummary_FrequentItem)(nil),       // 18: FrequentStringsSummary.FrequentItem
	(*FrequentNumbersSummary_FrequentDoubleItem)(nil), // 19: FrequentNumbersSummary.FrequentDoubleItem
	(*FrequentNumbersSummary_FrequentLongItem)(nil),   // 20: FrequentNumbersSummary.FrequentLongItem
	(*FrequentItemsSummary_FrequentItem)(nil),         // 21: FrequentItemsSummary.FrequentItem
	nil,                         // 22: CharPosSummary.CharPosMapEntry
	nil,                         // 23: SchemaSummary.TypeCountsEntry
	nil,                         // 24: DatasetSummary.ColumnsEntry
	nil,                         // 25: DatasetSummaries.ProfilesEntry
	(*InferredType)(nil),        // 26: InferredType
	(*CountersV0)(nil),          // 27: CountersV0
	(*DatasetPropertiesV0)(nil), // 28: DatasetPropertiesV0
	(ModelType)(0),              // 29: ModelType
	(*structpb.ListValue)(nil),  // 30: google.protobuf.ListValue
}
var file_v0_summaries_proto_depIdxs = []int32{
	18, // 0: FrequentStringsSummary.items:type_name -> FrequentStringsSummary.FrequentItem
	19, // 1: FrequentNumbersSummary.doubles:type_name -> FrequentNumbersSummary.FrequentDoubleItem
	20, // 2: FrequentNumbersSummary.longs:type_name -> FrequentNumbersSummary.FrequentLongItem
	21, // 3: FrequentItemsSummary.items:type_name -> FrequentItemsSummary.FrequentItem
	22, // 4: CharPosSummary.char_pos_map:type_name -> CharPosSummary.CharPosMapEntry
	0,  // 5: StringsSummary.unique_count:type_name -> UniqueCountSummary
	1,  // 6: StringsSummary.frequent:type_name -> FrequentStringsSummary
	9,  // 7: StringsSummary.length:type_name -> NumberSummary
	9,  // 8: StringsSummary.token_length:type_name -> NumberSummary
	4,  // 9: StringsSummary.char_pos_tracker:type_name -> CharPosSummary
	26, // 10: SchemaSummary.inferred_type:type_name -> InferredType
	23, // 11: SchemaSummary.type_counts:type_name -> SchemaSummary.TypeCountsEntry
	7,  // 12: NumberSummary.histogram:type_name -> HistogramSummary
	0,  // 13: NumberSummary.unique_count:type_name -> UniqueCountSummary
	8,  // 14: NumberSummary.quantiles:type_name -> QuantileSummary
	2,  // 15: NumberSummary.frequent_numbers:type_name -> FrequentNumbersSummary
	27, // 16: ColumnSummary.counters:type_name -> CountersV0
	6,  // 17: ColumnSummary.schema:type_name -> SchemaSummary
	9,  // 18: ColumnSummary.number_summary:type_name -> NumberSummary
	5,  // 19: ColumnSummary.string_summary:type_name -> StringsSummary
	3,  // 20: ColumnSummary.frequent_items:type_name -> FrequentItemsSummary
	0,  // 21: ColumnSummary.unique_count:type_name -> UniqueCountSummary
	28, // 22: DatasetSummary.properties:type_name -> DatasetPropertiesV0
	24, // 23: DatasetSummary.columns:type_name -> DatasetSummary.ColumnsEntry
	12, // 24: DatasetSummary.model:type_name -> ModelSummary
	13, // 25: ModelSummary.metrics:type_name -> MetricsSummary
	29, // 26: MetricsSummary.model_type:type_name -> ModelType
	15, // 27: MetricsSummary.roc_fpr_tpr:type_name -> ROCCurve
	16, // 28: MetricsSummary.recall_prec:type_name -> RecallCurve
	14, // 29: MetricsSummary.confusion_matrix:type_name -> ConfusionMatrix
	30, // 30: ConfusionMatrix.counts:type_name -> google.protobuf.ListValue
	30, // 31: ROCCurve.values:type_name -> google.protobuf.ListValue
	30, // 32: RecallCurve.values:type_name -> google.protobuf.ListValue
	25, // 33: DatasetSummaries.profiles:type_name -> DatasetSummaries.ProfilesEntry
	9,  // 34: CharPosSummary.CharPosMapEntry.value:type_name -> NumberSummary
	10, // 35: DatasetSummary.ColumnsEntry.value:type_name -> ColumnSummary
	11, // 36: DatasetSummaries.ProfilesEntry.value:type_name -> DatasetSummary
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_v0_summaries_proto_init() }
func file_v0_summaries_proto_init() {
	if File_v0_summaries_proto != nil {
		return
	}
	file_v0_messages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v0_summaries_proto_rawDesc), len(file_v0_summaries_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v0_summaries_proto_goTypes,
		DependencyIndexes: file_v0_summaries_proto_depIdxs,
		MessageInfos:      file_v0_summaries_proto_msgTypes,
	}.Build()
	File_v0_summaries_proto = out.File
	file_v0_summaries_proto_goTypes = nil
	file_v0_summaries_proto_depIdxs = nil
}
