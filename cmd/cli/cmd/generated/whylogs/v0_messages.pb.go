// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v4.25.3
// source: v0_messages.proto

package whylogs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelType int32

const (
	ModelType_UNKNOWN        ModelType = 0
	ModelType_CLASSIFICATION ModelType = 1
	ModelType_REGRESSION     ModelType = 2
	ModelType_EMBEDDINGS     ModelType = 3
	ModelType_NLP            ModelType = 4
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CLASSIFICATION",
		2: "REGRESSION",
		3: "EMBEDDINGS",
		4: "NLP",
	}
	ModelType_value = map[string]int32{
		"UNKNOWN":        0,
		"CLASSIFICATION": 1,
		"REGRESSION":     2,
		"EMBEDDINGS":     3,
		"NLP":            4,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_v0_messages_proto_enumTypes[0].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_v0_messages_proto_enumTypes[0]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{0}
}

type InferredType_Type int32

const (
	InferredType_UNKNOWN    InferredType_Type = 0
	InferredType_NULL       InferredType_Type = 1
	InferredType_FRACTIONAL InferredType_Type = 2
	InferredType_INTEGRAL   InferredType_Type = 3
	InferredType_BOOLEAN    InferredType_Type = 4
	InferredType_STRING     InferredType_Type = 5
)

// Enum value maps for InferredType_Type.
var (
	InferredType_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "NULL",
		2: "FRACTIONAL",
		3: "INTEGRAL",
		4: "BOOLEAN",
		5: "STRING",
	}
	InferredType_Type_value = map[string]int32{
		"UNKNOWN":    0,
		"NULL":       1,
		"FRACTIONAL": 2,
		"INTEGRAL":   3,
		"BOOLEAN":    4,
		"STRING":     5,
	}
)

func (x InferredType_Type) Enum() *InferredType_Type {
	p := new(InferredType_Type)
	*p = x
	return p
}

func (x InferredType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InferredType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v0_messages_proto_enumTypes[1].Descriptor()
}

func (InferredType_Type) Type() protoreflect.EnumType {
	return &file_v0_messages_proto_enumTypes[1]
}

func (x InferredType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InferredType_Type.Descriptor instead.
func (InferredType_Type) EnumDescriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{1, 0}
}

type CountersV0 struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Count     int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	TrueCount *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=true_count,json=trueCount,proto3" json:"true_count,omitempty"`
	// Deprecated: Marked as deprecated in v0_messages.proto.
	NullCount     *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountersV0) Reset() {
	*x = CountersV0{}
	mi := &file_v0_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountersV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountersV0) ProtoMessage() {}

func (x *CountersV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountersV0.ProtoReflect.Descriptor instead.
func (*CountersV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{0}
}

func (x *CountersV0) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CountersV0) GetTrueCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrueCount
	}
	return nil
}

// Deprecated: Marked as deprecated in v0_messages.proto.
func (x *CountersV0) GetNullCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.NullCount
	}
	return nil
}

type InferredType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          InferredType_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=InferredType_Type" json:"type,omitempty"`
	Ratio         float64                `protobuf:"fixed64,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InferredType) Reset() {
	*x = InferredType{}
	mi := &file_v0_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InferredType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferredType) ProtoMessage() {}

func (x *InferredType) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferredType.ProtoReflect.Descriptor instead.
func (*InferredType) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{1}
}

func (x *InferredType) GetType() InferredType_Type {
	if x != nil {
		return x.Type
	}
	return InferredType_UNKNOWN
}

func (x *InferredType) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

type DoublesMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Min           float64                `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	Max           float64                `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`
	Sum           float64                `protobuf:"fixed64,4,opt,name=sum,proto3" json:"sum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoublesMessage) Reset() {
	*x = DoublesMessage{}
	mi := &file_v0_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoublesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoublesMessage) ProtoMessage() {}

func (x *DoublesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoublesMessage.ProtoReflect.Descriptor instead.
func (*DoublesMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{2}
}

func (x *DoublesMessage) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DoublesMessage) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *DoublesMessage) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *DoublesMessage) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type LongsMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Min           int64                  `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Max           int64                  `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	Sum           int64                  `protobuf:"varint,4,opt,name=sum,proto3" json:"sum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LongsMessage) Reset() {
	*x = LongsMessage{}
	mi := &file_v0_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LongsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongsMessage) ProtoMessage() {}

func (x *LongsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongsMessage.ProtoReflect.Descriptor instead.
func (*LongsMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{3}
}

func (x *LongsMessage) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LongsMessage) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *LongsMessage) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *LongsMessage) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type VarianceMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sum           float64                `protobuf:"fixed64,2,opt,name=sum,proto3" json:"sum,omitempty"` // sample variance * (n-1)
	Mean          float64                `protobuf:"fixed64,3,opt,name=mean,proto3" json:"mean,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VarianceMessage) Reset() {
	*x = VarianceMessage{}
	mi := &file_v0_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VarianceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarianceMessage) ProtoMessage() {}

func (x *VarianceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarianceMessage.ProtoReflect.Descriptor instead.
func (*VarianceMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{4}
}

func (x *VarianceMessage) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *VarianceMessage) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *VarianceMessage) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

type FrequentNumbersSketchMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sketch        []byte                 `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
	LgMaxK        int32                  `protobuf:"varint,2,opt,name=lg_max_k,json=lgMaxK,proto3" json:"lg_max_k,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentNumbersSketchMessage) Reset() {
	*x = FrequentNumbersSketchMessage{}
	mi := &file_v0_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentNumbersSketchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentNumbersSketchMessage) ProtoMessage() {}

func (x *FrequentNumbersSketchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentNumbersSketchMessage.ProtoReflect.Descriptor instead.
func (*FrequentNumbersSketchMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{5}
}

func (x *FrequentNumbersSketchMessage) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

func (x *FrequentNumbersSketchMessage) GetLgMaxK() int32 {
	if x != nil {
		return x.LgMaxK
	}
	return 0
}

type FrequentItemsSketchMessageV0 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sketch        []byte                 `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
	LgMaxK        int32                  `protobuf:"varint,2,opt,name=lg_max_k,json=lgMaxK,proto3" json:"lg_max_k,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentItemsSketchMessageV0) Reset() {
	*x = FrequentItemsSketchMessageV0{}
	mi := &file_v0_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentItemsSketchMessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentItemsSketchMessageV0) ProtoMessage() {}

func (x *FrequentItemsSketchMessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentItemsSketchMessageV0.ProtoReflect.Descriptor instead.
func (*FrequentItemsSketchMessageV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{6}
}

func (x *FrequentItemsSketchMessageV0) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

func (x *FrequentItemsSketchMessageV0) GetLgMaxK() int32 {
	if x != nil {
		return x.LgMaxK
	}
	return 0
}

type NumbersMessageV0 struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Variance *VarianceMessage       `protobuf:"bytes,1,opt,name=variance,proto3" json:"variance,omitempty"`
	// Types that are valid to be assigned to Numbers:
	//
	//	*NumbersMessageV0_Doubles
	//	*NumbersMessageV0_Longs
	Numbers isNumbersMessageV0_Numbers `protobuf_oneof:"numbers"`
	// sketches
	Histogram       []byte                        `protobuf:"bytes,4,opt,name=histogram,proto3" json:"histogram,omitempty"`
	Theta           []byte                        `protobuf:"bytes,5,opt,name=theta,proto3" json:"theta,omitempty"`
	CompactTheta    []byte                        `protobuf:"bytes,6,opt,name=compact_theta,json=compactTheta,proto3" json:"compact_theta,omitempty"`
	FrequentNumbers *FrequentNumbersSketchMessage `protobuf:"bytes,7,opt,name=frequent_numbers,json=frequentNumbers,proto3" json:"frequent_numbers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NumbersMessageV0) Reset() {
	*x = NumbersMessageV0{}
	mi := &file_v0_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumbersMessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumbersMessageV0) ProtoMessage() {}

func (x *NumbersMessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumbersMessageV0.ProtoReflect.Descriptor instead.
func (*NumbersMessageV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{7}
}

func (x *NumbersMessageV0) GetVariance() *VarianceMessage {
	if x != nil {
		return x.Variance
	}
	return nil
}

func (x *NumbersMessageV0) GetNumbers() isNumbersMessageV0_Numbers {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *NumbersMessageV0) GetDoubles() *DoublesMessage {
	if x != nil {
		if x, ok := x.Numbers.(*NumbersMessageV0_Doubles); ok {
			return x.Doubles
		}
	}
	return nil
}

func (x *NumbersMessageV0) GetLongs() *LongsMessage {
	if x != nil {
		if x, ok := x.Numbers.(*NumbersMessageV0_Longs); ok {
			return x.Longs
		}
	}
	return nil
}

func (x *NumbersMessageV0) GetHistogram() []byte {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *NumbersMessageV0) GetTheta() []byte {
	if x != nil {
		return x.Theta
	}
	return nil
}

func (x *NumbersMessageV0) GetCompactTheta() []byte {
	if x != nil {
		return x.CompactTheta
	}
	return nil
}

func (x *NumbersMessageV0) GetFrequentNumbers() *FrequentNumbersSketchMessage {
	if x != nil {
		return x.FrequentNumbers
	}
	return nil
}

type isNumbersMessageV0_Numbers interface {
	isNumbersMessageV0_Numbers()
}

type NumbersMessageV0_Doubles struct {
	Doubles *DoublesMessage `protobuf:"bytes,2,opt,name=doubles,proto3,oneof"`
}

type NumbersMessageV0_Longs struct {
	Longs *LongsMessage `protobuf:"bytes,3,opt,name=longs,proto3,oneof"`
}

func (*NumbersMessageV0_Doubles) isNumbersMessageV0_Numbers() {}

func (*NumbersMessageV0_Longs) isNumbersMessageV0_Numbers() {}

type CharPosMessage struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	CharList      string                       `protobuf:"bytes,1,opt,name=char_list,json=charList,proto3" json:"char_list,omitempty"`
	CharPosMap    map[string]*NumbersMessageV0 `protobuf:"bytes,2,rep,name=char_pos_map,json=charPosMap,proto3" json:"char_pos_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharPosMessage) Reset() {
	*x = CharPosMessage{}
	mi := &file_v0_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharPosMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharPosMessage) ProtoMessage() {}

func (x *CharPosMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharPosMessage.ProtoReflect.Descriptor instead.
func (*CharPosMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CharPosMessage) GetCharList() string {
	if x != nil {
		return x.CharList
	}
	return ""
}

func (x *CharPosMessage) GetCharPosMap() map[string]*NumbersMessageV0 {
	if x != nil {
		return x.CharPosMap
	}
	return nil
}

type StringsMessageV0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Count int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// sketches
	Theta          []byte            `protobuf:"bytes,2,opt,name=theta,proto3" json:"theta,omitempty"`
	Items          []byte            `protobuf:"bytes,3,opt,name=items,proto3" json:"items,omitempty"`
	CompactTheta   []byte            `protobuf:"bytes,4,opt,name=compact_theta,json=compactTheta,proto3" json:"compact_theta,omitempty"`
	Length         *NumbersMessageV0 `protobuf:"bytes,5,opt,name=length,proto3" json:"length,omitempty"`
	TokenLength    *NumbersMessageV0 `protobuf:"bytes,6,opt,name=token_length,json=tokenLength,proto3" json:"token_length,omitempty"`
	CharPosTracker *CharPosMessage   `protobuf:"bytes,7,opt,name=char_pos_tracker,json=charPosTracker,proto3" json:"char_pos_tracker,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StringsMessageV0) Reset() {
	*x = StringsMessageV0{}
	mi := &file_v0_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringsMessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringsMessageV0) ProtoMessage() {}

func (x *StringsMessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringsMessageV0.ProtoReflect.Descriptor instead.
func (*StringsMessageV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{9}
}

func (x *StringsMessageV0) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StringsMessageV0) GetTheta() []byte {
	if x != nil {
		return x.Theta
	}
	return nil
}

func (x *StringsMessageV0) GetItems() []byte {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *StringsMessageV0) GetCompactTheta() []byte {
	if x != nil {
		return x.CompactTheta
	}
	return nil
}

func (x *StringsMessageV0) GetLength() *NumbersMessageV0 {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *StringsMessageV0) GetTokenLength() *NumbersMessageV0 {
	if x != nil {
		return x.TokenLength
	}
	return nil
}

func (x *StringsMessageV0) GetCharPosTracker() *CharPosMessage {
	if x != nil {
		return x.CharPosTracker
	}
	return nil
}

type SchemaMessageV0 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeCounts    map[int32]int64        `protobuf:"bytes,1,rep,name=typeCounts,proto3" json:"typeCounts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	InferredType  *InferredType          `protobuf:"bytes,2,opt,name=inferred_type,json=inferredType,proto3" json:"inferred_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaMessageV0) Reset() {
	*x = SchemaMessageV0{}
	mi := &file_v0_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaMessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMessageV0) ProtoMessage() {}

func (x *SchemaMessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMessageV0.ProtoReflect.Descriptor instead.
func (*SchemaMessageV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{10}
}

func (x *SchemaMessageV0) GetTypeCounts() map[int32]int64 {
	if x != nil {
		return x.TypeCounts
	}
	return nil
}

func (x *SchemaMessageV0) GetInferredType() *InferredType {
	if x != nil {
		return x.InferredType
	}
	return nil
}

type ColumnMessageV0 struct {
	state              protoimpl.MessageState        `protogen:"open.v1"`
	Name               string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Counters           *CountersV0                   `protobuf:"bytes,2,opt,name=counters,proto3" json:"counters,omitempty"`
	Schema             *SchemaMessageV0              `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Numbers            *NumbersMessageV0             `protobuf:"bytes,4,opt,name=numbers,proto3" json:"numbers,omitempty"`
	Strings            *StringsMessageV0             `protobuf:"bytes,5,opt,name=strings,proto3" json:"strings,omitempty"`
	InferredType       *InferredType                 `protobuf:"bytes,6,opt,name=inferred_type,json=inferredType,proto3" json:"inferred_type,omitempty"`
	FrequentItems      *FrequentItemsSketchMessageV0 `protobuf:"bytes,7,opt,name=frequent_items,json=frequentItems,proto3" json:"frequent_items,omitempty"`
	CardinalityTracker *HllSketchMessageV0           `protobuf:"bytes,8,opt,name=cardinality_tracker,json=cardinalityTracker,proto3" json:"cardinality_tracker,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ColumnMessageV0) Reset() {
	*x = ColumnMessageV0{}
	mi := &file_v0_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnMessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMessageV0) ProtoMessage() {}

func (x *ColumnMessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMessageV0.ProtoReflect.Descriptor instead.
func (*ColumnMessageV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{11}
}

func (x *ColumnMessageV0) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnMessageV0) GetCounters() *CountersV0 {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *ColumnMessageV0) GetSchema() *SchemaMessageV0 {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ColumnMessageV0) GetNumbers() *NumbersMessageV0 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *ColumnMessageV0) GetStrings() *StringsMessageV0 {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *ColumnMessageV0) GetInferredType() *InferredType {
	if x != nil {
		return x.InferredType
	}
	return nil
}

func (x *ColumnMessageV0) GetFrequentItems() *FrequentItemsSketchMessageV0 {
	if x != nil {
		return x.FrequentItems
	}
	return nil
}

func (x *ColumnMessageV0) GetCardinalityTracker() *HllSketchMessageV0 {
	if x != nil {
		return x.CardinalityTracker
	}
	return nil
}

type DatasetPropertiesV0 struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SchemaMajorVersion uint32                 `protobuf:"varint,1,opt,name=schema_major_version,json=schemaMajorVersion,proto3" json:"schema_major_version,omitempty"`
	SchemaMinorVersion uint32                 `protobuf:"varint,2,opt,name=schema_minor_version,json=schemaMinorVersion,proto3" json:"schema_minor_version,omitempty"`
	SessionId          string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionTimestamp   int64                  `protobuf:"varint,4,opt,name=session_timestamp,json=sessionTimestamp,proto3" json:"session_timestamp,omitempty"`
	DataTimestamp      int64                  `protobuf:"varint,5,opt,name=data_timestamp,json=dataTimestamp,proto3" json:"data_timestamp,omitempty"`
	Tags               map[string]string      `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Metadata           map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // TODO: store other configuration here
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DatasetPropertiesV0) Reset() {
	*x = DatasetPropertiesV0{}
	mi := &file_v0_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetPropertiesV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetPropertiesV0) ProtoMessage() {}

func (x *DatasetPropertiesV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetPropertiesV0.ProtoReflect.Descriptor instead.
func (*DatasetPropertiesV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{12}
}

func (x *DatasetPropertiesV0) GetSchemaMajorVersion() uint32 {
	if x != nil {
		return x.SchemaMajorVersion
	}
	return 0
}

func (x *DatasetPropertiesV0) GetSchemaMinorVersion() uint32 {
	if x != nil {
		return x.SchemaMinorVersion
	}
	return 0
}

func (x *DatasetPropertiesV0) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DatasetPropertiesV0) GetSessionTimestamp() int64 {
	if x != nil {
		return x.SessionTimestamp
	}
	return 0
}

func (x *DatasetPropertiesV0) GetDataTimestamp() int64 {
	if x != nil {
		return x.DataTimestamp
	}
	return 0
}

func (x *DatasetPropertiesV0) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DatasetPropertiesV0) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ScoreMatrixMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Labels          []string               `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	PredictionField string                 `protobuf:"bytes,2,opt,name=prediction_field,json=predictionField,proto3" json:"prediction_field,omitempty"`
	TargetField     string                 `protobuf:"bytes,3,opt,name=target_field,json=targetField,proto3" json:"target_field,omitempty"`
	ScoreField      string                 `protobuf:"bytes,4,opt,name=score_field,json=scoreField,proto3" json:"score_field,omitempty"`
	// a flattened NxN matrix (N = len(labels))
	Scores        []*NumbersMessageV0 `protobuf:"bytes,10,rep,name=scores,proto3" json:"scores,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreMatrixMessage) Reset() {
	*x = ScoreMatrixMessage{}
	mi := &file_v0_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreMatrixMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreMatrixMessage) ProtoMessage() {}

func (x *ScoreMatrixMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreMatrixMessage.ProtoReflect.Descriptor instead.
func (*ScoreMatrixMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{13}
}

func (x *ScoreMatrixMessage) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ScoreMatrixMessage) GetPredictionField() string {
	if x != nil {
		return x.PredictionField
	}
	return ""
}

func (x *ScoreMatrixMessage) GetTargetField() string {
	if x != nil {
		return x.TargetField
	}
	return ""
}

func (x *ScoreMatrixMessage) GetScoreField() string {
	if x != nil {
		return x.ScoreField
	}
	return ""
}

func (x *ScoreMatrixMessage) GetScores() []*NumbersMessageV0 {
	if x != nil {
		return x.Scores
	}
	return nil
}

type RegressionMetricsMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PredictionField string                 `protobuf:"bytes,1,opt,name=prediction_field,json=predictionField,proto3" json:"prediction_field,omitempty"`
	TargetField     string                 `protobuf:"bytes,2,opt,name=target_field,json=targetField,proto3" json:"target_field,omitempty"`
	Count           uint64                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	SumAbsDiff      float64                `protobuf:"fixed64,4,opt,name=sum_abs_diff,json=sumAbsDiff,proto3" json:"sum_abs_diff,omitempty"`
	SumDiff         float64                `protobuf:"fixed64,5,opt,name=sum_diff,json=sumDiff,proto3" json:"sum_diff,omitempty"`
	Sum2Diff        float64                `protobuf:"fixed64,6,opt,name=sum2_diff,json=sum2Diff,proto3" json:"sum2_diff,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RegressionMetricsMessage) Reset() {
	*x = RegressionMetricsMessage{}
	mi := &file_v0_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegressionMetricsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionMetricsMessage) ProtoMessage() {}

func (x *RegressionMetricsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionMetricsMessage.ProtoReflect.Descriptor instead.
func (*RegressionMetricsMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{14}
}

func (x *RegressionMetricsMessage) GetPredictionField() string {
	if x != nil {
		return x.PredictionField
	}
	return ""
}

func (x *RegressionMetricsMessage) GetTargetField() string {
	if x != nil {
		return x.TargetField
	}
	return ""
}

func (x *RegressionMetricsMessage) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RegressionMetricsMessage) GetSumAbsDiff() float64 {
	if x != nil {
		return x.SumAbsDiff
	}
	return 0
}

func (x *RegressionMetricsMessage) GetSumDiff() float64 {
	if x != nil {
		return x.SumDiff
	}
	return 0
}

func (x *RegressionMetricsMessage) GetSum2Diff() float64 {
	if x != nil {
		return x.Sum2Diff
	}
	return 0
}

type ModelMetricsMessage struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	ScoreMatrix       *ScoreMatrixMessage       `protobuf:"bytes,1,opt,name=scoreMatrix,proto3" json:"scoreMatrix,omitempty"`
	ModelType         ModelType                 `protobuf:"varint,2,opt,name=modelType,proto3,enum=ModelType" json:"modelType,omitempty"`
	RegressionMetrics *RegressionMetricsMessage `protobuf:"bytes,3,opt,name=regressionMetrics,proto3" json:"regressionMetrics,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ModelMetricsMessage) Reset() {
	*x = ModelMetricsMessage{}
	mi := &file_v0_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelMetricsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMetricsMessage) ProtoMessage() {}

func (x *ModelMetricsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMetricsMessage.ProtoReflect.Descriptor instead.
func (*ModelMetricsMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ModelMetricsMessage) GetScoreMatrix() *ScoreMatrixMessage {
	if x != nil {
		return x.ScoreMatrix
	}
	return nil
}

func (x *ModelMetricsMessage) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_UNKNOWN
}

func (x *ModelMetricsMessage) GetRegressionMetrics() *RegressionMetricsMessage {
	if x != nil {
		return x.RegressionMetrics
	}
	return nil
}

type ModelProfileMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutputFields  []string               `protobuf:"bytes,1,rep,name=output_fields,json=outputFields,proto3" json:"output_fields,omitempty"` // Reserving fields for ModelMessage
	Metrics       *ModelMetricsMessage   `protobuf:"bytes,10,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProfileMessage) Reset() {
	*x = ModelProfileMessage{}
	mi := &file_v0_messages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProfileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProfileMessage) ProtoMessage() {}

func (x *ModelProfileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProfileMessage.ProtoReflect.Descriptor instead.
func (*ModelProfileMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{16}
}

func (x *ModelProfileMessage) GetOutputFields() []string {
	if x != nil {
		return x.OutputFields
	}
	return nil
}

func (x *ModelProfileMessage) GetMetrics() *ModelMetricsMessage {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type DatasetProfileMessageV0 struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Properties *DatasetPropertiesV0        `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	Columns    map[string]*ColumnMessageV0 `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// reserve other fields for dataset level data
	ModeProfile   *ModelProfileMessage `protobuf:"bytes,10,opt,name=modeProfile,proto3" json:"modeProfile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatasetProfileMessageV0) Reset() {
	*x = DatasetProfileMessageV0{}
	mi := &file_v0_messages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetProfileMessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetProfileMessageV0) ProtoMessage() {}

func (x *DatasetProfileMessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetProfileMessageV0.ProtoReflect.Descriptor instead.
func (*DatasetProfileMessageV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{17}
}

func (x *DatasetProfileMessageV0) GetProperties() *DatasetPropertiesV0 {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *DatasetProfileMessageV0) GetColumns() map[string]*ColumnMessageV0 {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DatasetProfileMessageV0) GetModeProfile() *ModelProfileMessage {
	if x != nil {
		return x.ModeProfile
	}
	return nil
}

// *
// The follow section is for transmission and reconstruction of the dataset
// in WhyLogs backend
type ColumnsChunkSegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID is required to aggregate to the original message
	// This should map back to the original dataset
	Marker        string             `protobuf:"bytes,1,opt,name=marker,proto3" json:"marker,omitempty"`
	Columns       []*ColumnMessageV0 `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnsChunkSegment) Reset() {
	*x = ColumnsChunkSegment{}
	mi := &file_v0_messages_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnsChunkSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsChunkSegment) ProtoMessage() {}

func (x *ColumnsChunkSegment) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsChunkSegment.ProtoReflect.Descriptor instead.
func (*ColumnsChunkSegment) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{18}
}

func (x *ColumnsChunkSegment) GetMarker() string {
	if x != nil {
		return x.Marker
	}
	return ""
}

func (x *ColumnsChunkSegment) GetColumns() []*ColumnMessageV0 {
	if x != nil {
		return x.Columns
	}
	return nil
}

type DatasetMetadataSegment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Marker        string                 `protobuf:"bytes,1,opt,name=marker,proto3" json:"marker,omitempty"`
	Properties    *DatasetPropertiesV0   `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatasetMetadataSegment) Reset() {
	*x = DatasetMetadataSegment{}
	mi := &file_v0_messages_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetMetadataSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetMetadataSegment) ProtoMessage() {}

func (x *DatasetMetadataSegment) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetMetadataSegment.ProtoReflect.Descriptor instead.
func (*DatasetMetadataSegment) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{19}
}

func (x *DatasetMetadataSegment) GetMarker() string {
	if x != nil {
		return x.Marker
	}
	return ""
}

func (x *DatasetMetadataSegment) GetProperties() *DatasetPropertiesV0 {
	if x != nil {
		return x.Properties
	}
	return nil
}

// A segment of a dataset profile. This can be used to composed the
// original object back
type MessageSegment struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Marker string                 `protobuf:"bytes,1,opt,name=marker,proto3" json:"marker,omitempty"`
	// Types that are valid to be assigned to Item:
	//
	//	*MessageSegment_Metadata
	//	*MessageSegment_Columns
	Item          isMessageSegment_Item `protobuf_oneof:"item"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageSegment) Reset() {
	*x = MessageSegment{}
	mi := &file_v0_messages_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSegment) ProtoMessage() {}

func (x *MessageSegment) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSegment.ProtoReflect.Descriptor instead.
func (*MessageSegment) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{20}
}

func (x *MessageSegment) GetMarker() string {
	if x != nil {
		return x.Marker
	}
	return ""
}

func (x *MessageSegment) GetItem() isMessageSegment_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *MessageSegment) GetMetadata() *DatasetMetadataSegment {
	if x != nil {
		if x, ok := x.Item.(*MessageSegment_Metadata); ok {
			return x.Metadata
		}
	}
	return nil
}

func (x *MessageSegment) GetColumns() *ColumnsChunkSegment {
	if x != nil {
		if x, ok := x.Item.(*MessageSegment_Columns); ok {
			return x.Columns
		}
	}
	return nil
}

type isMessageSegment_Item interface {
	isMessageSegment_Item()
}

type MessageSegment_Metadata struct {
	Metadata *DatasetMetadataSegment `protobuf:"bytes,2,opt,name=metadata,proto3,oneof"`
}

type MessageSegment_Columns struct {
	Columns *ColumnsChunkSegment `protobuf:"bytes,3,opt,name=columns,proto3,oneof"`
}

func (*MessageSegment_Metadata) isMessageSegment_Item() {}

func (*MessageSegment_Columns) isMessageSegment_Item() {}

type HllSketchMessageV0 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sketch        []byte                 `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
	LgK           int32                  `protobuf:"varint,2,opt,name=lg_k,json=lgK,proto3" json:"lg_k,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HllSketchMessageV0) Reset() {
	*x = HllSketchMessageV0{}
	mi := &file_v0_messages_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HllSketchMessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HllSketchMessageV0) ProtoMessage() {}

func (x *HllSketchMessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HllSketchMessageV0.ProtoReflect.Descriptor instead.
func (*HllSketchMessageV0) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{21}
}

func (x *HllSketchMessageV0) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

func (x *HllSketchMessageV0) GetLgK() int32 {
	if x != nil {
		return x.LgK
	}
	return 0
}

type KllFloatsSketchMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sketch        []byte                 `protobuf:"bytes,1,opt,name=sketch,proto3" json:"sketch,omitempty"`
	LgK           int32                  `protobuf:"varint,2,opt,name=lg_k,json=lgK,proto3" json:"lg_k,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KllFloatsSketchMessage) Reset() {
	*x = KllFloatsSketchMessage{}
	mi := &file_v0_messages_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KllFloatsSketchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KllFloatsSketchMessage) ProtoMessage() {}

func (x *KllFloatsSketchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v0_messages_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KllFloatsSketchMessage.ProtoReflect.Descriptor instead.
func (*KllFloatsSketchMessage) Descriptor() ([]byte, []int) {
	return file_v0_messages_proto_rawDescGZIP(), []int{22}
}

func (x *KllFloatsSketchMessage) GetSketch() []byte {
	if x != nil {
		return x.Sketch
	}
	return nil
}

func (x *KllFloatsSketchMessage) GetLgK() int32 {
	if x != nil {
		return x.LgK
	}
	return 0
}

var File_v0_messages_proto protoreflect.FileDescriptor

var file_v0_messages_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x76, 0x30, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x56, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x72, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x22, 0x54, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x22, 0x5c, 0x0a, 0x0e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x5a, 0x0a, 0x0c, 0x4c, 0x6f, 0x6e, 0x67, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x73, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x0f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x22, 0x50, 0x0a, 0x1c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x08, 0x6c, 0x67,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x67,
	0x4d, 0x61, 0x78, 0x4b, 0x22, 0x50, 0x0a, 0x1c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x08,
	0x6c, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x67, 0x4d, 0x61, 0x78, 0x4b, 0x22, 0xc2, 0x02, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x12, 0x2c, 0x0a, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x54, 0x68, 0x65, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x50,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x95, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x68, 0x65, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30,
	0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x50, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x50, 0x6f,
	0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x12, 0x40, 0x0a, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x30, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x92, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x56, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x30, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30,
	0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x52, 0x07, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56,
	0x30, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x44, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x48, 0x6c, 0x6c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x30, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xd6, 0x03, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x30, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x30, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56,
	0x30, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc6, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x75, 0x6d,
	0x5f, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x73, 0x75, 0x6d, 0x41, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x75, 0x6d, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x32, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x32, 0x44,
	0x69, 0x66, 0x66, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x12, 0x28, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x11,
	0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x6a, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0x96, 0x02, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x30, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x4c, 0x0a, 0x0c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x66, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56,
	0x30, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x99, 0x01,
	0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x3f, 0x0a, 0x12, 0x48, 0x6c, 0x6c,
	0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x30, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x11, 0x0a, 0x04, 0x6c, 0x67, 0x5f, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x67, 0x4b, 0x22, 0x43, 0x0a, 0x16, 0x4b, 0x6c,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x11, 0x0a, 0x04,
	0x6c, 0x67, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x67, 0x4b, 0x2a,
	0x55, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x4c, 0x50, 0x10, 0x04, 0x42, 0x40, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x68,
	0x79, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50,
	0x01, 0x5a, 0x15, 0x63, 0x6d, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x77, 0x68, 0x79, 0x6c, 0x6f, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v0_messages_proto_rawDescOnce sync.Once
	file_v0_messages_proto_rawDescData []byte
)

func file_v0_messages_proto_rawDescGZIP() []byte {
	file_v0_messages_proto_rawDescOnce.Do(func() {
		file_v0_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v0_messages_proto_rawDesc), len(file_v0_messages_proto_rawDesc)))
	})
	return file_v0_messages_proto_rawDescData
}

var file_v0_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v0_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_v0_messages_proto_goTypes = []any{
	(ModelType)(0),                       // 0: ModelType
	(InferredType_Type)(0),               // 1: InferredType.Type
	(*CountersV0)(nil),                   // 2: CountersV0
	(*InferredType)(nil),                 // 3: InferredType
	(*DoublesMessage)(nil),               // 4: DoublesMessage
	(*LongsMessage)(nil),                 // 5: LongsMessage
	(*VarianceMessage)(nil),              // 6: VarianceMessage
	(*FrequentNumbersSketchMessage)(nil), // 7: FrequentNumbersSketchMessage
	(*FrequentItemsSketchMessageV0)(nil), // 8: FrequentItemsSketchMessageV0
	(*NumbersMessageV0)(nil),             // 9: NumbersMessageV0
	(*CharPosMessage)(nil),               // 10: CharPosMessage
	(*StringsMessageV0)(nil),             // 11: StringsMessageV0
	(*SchemaMessageV0)(nil),              // 12: SchemaMessageV0
	(*ColumnMessageV0)(nil),              // 13: ColumnMessageV0
	(*DatasetPropertiesV0)(nil),          // 14: DatasetPropertiesV0
	(*ScoreMatrixMessage)(nil),           // 15: ScoreMatrixMessage
	(*RegressionMetricsMessage)(nil),     // 16: RegressionMetricsMessage
	(*ModelMetricsMessage)(nil),          // 17: ModelMetricsMessage
	(*ModelProfileMessage)(nil),          // 18: ModelProfileMessage
	(*DatasetProfileMessageV0)(nil),      // 19: DatasetProfileMessageV0
	(*ColumnsChunkSegment)(nil),          // 20: ColumnsChunkSegment
	(*DatasetMetadataSegment)(nil),       // 21: DatasetMetadataSegment
	(*MessageSegment)(nil),               // 22: MessageSegment
	(*HllSketchMessageV0)(nil),           // 23: HllSketchMessageV0
	(*KllFloatsSketchMessage)(nil),       // 24: KllFloatsSketchMessage
	nil,                                  // 25: CharPosMessage.CharPosMapEntry
	nil,                                  // 26: SchemaMessageV0.TypeCountsEntry
	nil,                                  // 27: DatasetPropertiesV0.TagsEntry
	nil,                                  // 28: DatasetPropertiesV0.MetadataEntry
	nil,                                  // 29: DatasetProfileMessageV0.ColumnsEntry
	(*wrapperspb.Int64Value)(nil),        // 30: google.protobuf.Int64Value
}
var file_v0_messages_proto_depIdxs = []int32{
	30, // 0: CountersV0.true_count:type_name -> google.protobuf.Int64Value
	30, // 1: CountersV0.null_count:type_name -> google.protobuf.Int64Value
	1,  // 2: InferredType.type:type_name -> InferredType.Type
	6,  // 3: NumbersMessageV0.variance:type_name -> VarianceMessage
	4,  // 4: NumbersMessageV0.doubles:type_name -> DoublesMessage
	5,  // 5: NumbersMessageV0.longs:type_name -> LongsMessage
	7,  // 6: NumbersMessageV0.frequent_numbers:type_name -> FrequentNumbersSketchMessage
	25, // 7: CharPosMessage.char_pos_map:type_name -> CharPosMessage.CharPosMapEntry
	9,  // 8: StringsMessageV0.length:type_name -> NumbersMessageV0
	9,  // 9: StringsMessageV0.token_length:type_name -> NumbersMessageV0
	10, // 10: StringsMessageV0.char_pos_tracker:type_name -> CharPosMessage
	26, // 11: SchemaMessageV0.typeCounts:type_name -> SchemaMessageV0.TypeCountsEntry
	3,  // 12: SchemaMessageV0.inferred_type:type_name -> InferredType
	2,  // 13: ColumnMessageV0.counters:type_name -> CountersV0
	12, // 14: ColumnMessageV0.schema:type_name -> SchemaMessageV0
	9,  // 15: ColumnMessageV0.numbers:type_name -> NumbersMessageV0
	11, // 16: ColumnMessageV0.strings:type_name -> StringsMessageV0
	3,  // 17: ColumnMessageV0.inferred_type:type_name -> InferredType
	8,  // 18: ColumnMessageV0.frequent_items:type_name -> FrequentItemsSketchMessageV0
	23, // 19: ColumnMessageV0.cardinality_tracker:type_name -> HllSketchMessageV0
	27, // 20: DatasetPropertiesV0.tags:type_name -> DatasetPropertiesV0.TagsEntry
	28, // 21: DatasetPropertiesV0.metadata:type_name -> DatasetPropertiesV0.MetadataEntry
	9,  // 22: ScoreMatrixMessage.scores:type_name -> NumbersMessageV0
	15, // 23: ModelMetricsMessage.scoreMatrix:type_name -> ScoreMatrixMessage
	0,  // 24: ModelMetricsMessage.modelType:type_name -> ModelType
	16, // 25: ModelMetricsMessage.regressionMetrics:type_name -> RegressionMetricsMessage
	17, // 26: ModelProfileMessage.metrics:type_name -> ModelMetricsMessage
	14, // 27: DatasetProfileMessageV0.properties:type_name -> DatasetPropertiesV0
	29, // 28: DatasetProfileMessageV0.columns:type_name -> DatasetProfileMessageV0.ColumnsEntry
	18, // 29: DatasetProfileMessageV0.modeProfile:type_name -> ModelProfileMessage
	13, // 30: ColumnsChunkSegment.columns:type_name -> ColumnMessageV0
	14, // 31: DatasetMetadataSegment.properties:type_name -> DatasetPropertiesV0
	21, // 32: MessageSegment.metadata:type_name -> DatasetMetadataSegment
	20, // 33: MessageSegment.columns:type_name -> ColumnsChunkSegment
	9,  // 34: CharPosMessage.CharPosMapEntry.value:type_name -> NumbersMessageV0
	13, // 35: DatasetProfileMessageV0.ColumnsEntry.value:type_name -> ColumnMessageV0
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_v0_messages_proto_init() }
func file_v0_messages_proto_init() {
	if File_v0_messages_proto != nil {
		return
	}
	file_v0_messages_proto_msgTypes[7].OneofWrappers = []any{
		(*NumbersMessageV0_Doubles)(nil),
		(*NumbersMessageV0_Longs)(nil),
	}
	file_v0_messages_proto_msgTypes[20].OneofWrappers = []any{
		(*MessageSegment_Metadata)(nil),
		(*MessageSegment_Columns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v0_messages_proto_rawDesc), len(file_v0_messages_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v0_messages_proto_goTypes,
		DependencyIndexes: file_v0_messages_proto_depIdxs,
		EnumInfos:         file_v0_messages_proto_enumTypes,
		MessageInfos:      file_v0_messages_proto_msgTypes,
	}.Build()
	File_v0_messages_proto = out.File
	file_v0_messages_proto_goTypes = nil
	file_v0_messages_proto_depIdxs = nil
}
